/**<
    Various additional reusable actions.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import core.events.actions
import core.events.input

/// Module: actions
var M = {}

var Action = actions.Action
var ActionQueue = actions.ActionQueue

from std.table import pairs

/**
    A container action that can queue more actions into itself, which run on
    its actor, finishes when both this action and all subactions are done.

    See also:
        - $ParallelAction
*/
M.ContainerAction = Action.clone({
    name: "ContainerAction",

    /**
        Takes kwargs. Those are passed unmodified to the {{$actions.Action}}
        constructor. This action looks up the field `actions` in it and uses
        it as an action source.
    */
    __ctor: func(self, kwargs) {
        Action::__ctor(self, kwargs)
        self.other_actions = kwargs.actions || []
    },

    /**
        Iterates over the action array given in the constructor, adding
        each into the system using {{$add_action}}.
    */
    __start: func(self) {
        var actqueue = ActionQueue(self.actor)
        for i, action in self.other_actions.each() {
            self.add_action(action)
        }
        self.action_queue = actqueue
    },

    /**
        Runs all the action queue for the given `millis`, returns the same as
        {{$actions.Action}} with the addition of another condition (the number
        of actions in the system must be zero - the action won't finish until
        everything is done).
    */
    __run: func(self, millis) {
        var actqueue = self.action_queue
        actqueue.run(millis)
        return Action::__run(self, millis) && actqueue.actions.empty()
    },

    /// Clears up the action queue.
    __finish: func(self) {
        self.action_queue.clear()
    },

    /**
        Given an action, this queues it into the action queue inside.
    */
    add_action: func(self, action) {
        self.action_queue.enqueue(action)
    }
})

/**
    A container action that executes its actions in parallel. It's not
    cancelable. It works by parallel by having an internal action queue
    for each action.

    See also:
        - $ContainerAction
*/
M.ParallelAction = Action.clone({
    name: "ParallelAction",
    cancelable: false,

    /**
        Takes kwargs. Those are passed unmodified to the {{$actions.Action}}
        constructor. This action looks up the field `actions` in it and uses
        it as an action source.
    */
    __ctor: func(self, kwargs) {
        Action::__ctor(self, kwargs)
        self.action_queues = []
        self.other_actions = kwargs.actions || []
    },

    /**
        Iterates over the action array given in the constructor, adding
        each into the system using {{$add_action}}.
    */
    __start: func(self) {
        for i, action in self.other_actions.each() {
            self.add_action(action)
        }
    },

    /**
        Runs all the action queues saved inside, filtering out those that
        are already done. Returns the same as {{$actions.Action}} with the
        addition of another condition (the number of systems must be
        zero - the action won't finish until everything is done).
    */
    __run: func(self, millis) {
        var systems = self.action_queues.compact(func(actqueue) {
            actqueue.run(millis)
            return !actqueue.actions.empty()
        })
        return Action::__run(self, millis) && systems.empty()
    },

    /// Clears up the remaining action queues.
    __finish: func(self) {
        for i, actqueue in self.action_queues.each() {
            actqueue.clear()
        }
    },

    /**
        Given an action, creates an action queue and queues the given action
        inside, then appends the system into the action queue table inside.
    */
    add_action: func(self, action) {
        var actqueue = ActionQueue(self.actor)
        actqueue.enqueue(action)
        self.action_queues.push(actqueue)
    }
})

/**
    Action that starts, sets its actor's animation to its local_animation
    property, runs, ends and sets back the old animation. Not too useful
    alone, but can be used for inheriting.
*/
M.LocalAnimationAction = Action.clone({
    name: "LocalAnimationAction",

    /**
        Gives its actor the new animation. Uses the set_local_animation
        method of an entity.
    */
    __start: func(self) {
        var ac = self.actor
        self.old_animation = ac.get_attr("animation")
        ac.set_local_animation(self.local_animation)
    },

    /// Resets the animation back.
    __finish: func(self) {
        var ac = self.actor
        var anim = ac.get_attr("animation")
        var lanim = self.local_animation
        if anim == lanim { ac.set_local_animation(self.old_animation) }
    }
})

var event_list = [
    "yaw", "pitch", "move", "strafe", "jump", "crouch", "click", "mouse_move"
]

/**
    An input capture plugin. Contains the __start and __finish methods you
    need to call in order to give your action input capturing capabilities.
    See $InputCaptureAction.
*/
M.input_capture_plugin = {
    /// Replaces the events.
    __start: func(self) {
        var events = self.events
        var old_events = {}
        self.old_events = old_events
        for i, en in event_list.each() {
            var ev = events[en]
            if ev { old_events[en] = input::set_event(en,
                func(...) { ev(self, ...) }) }
        }
    },

    /// Restores the events.
    __finish: func(self) {
        for en, ev in pairs(self.old_events) {
            input::set_event(en, ev)
        }
    }
}

/**
    An input capture action - temporarily replaces input handlers (yaw, pitch,
    move, strafe, jump, crouch, click, mouse_move) with provided functions and
    restores them when it finishes. Uses $input_capture_plugin.
*/
M.InputCaptureAction = Action.clone({
    name: "InputCaptureAction",

    /**
        Kwargs are passed as-is to the original constructor and a field
        `events` is looked up, which is an associative table of events.
        If that fails, it uses `self.events`. If that alos fails, it uses
        an empty table as a fallback.
    */
    __ctor: func(self, kwargs) {
        Action::__ctor(self, kwargs)
        self.events = kwargs.events || self.events || {}
    },

    __start: M.input_capture_plugin.__start,
    __finish: M.input_capture_plugin.__finish,
})

return M
