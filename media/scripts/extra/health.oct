/**<
    A reusable health system that integrates with the game manager and
    other modules (the game manager is required).

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import core.gui.core as gui
import core.events.frame
import core.events.actions
import core.engine.model
import core.engine.edit
import core.entities.svars
import core.entities.ents
import core.network.msg

import extra.events.actions as eactions

from std.conv import tostring
from std.math import min, max, floor

/**
    This module adds three new animations, "dead", "dying" and "pain",
    on the client. They're stored in this enumeration.
*/
export var anims = @[!server,enum {
    dead : model::register_anim("dead"),
    dying: model::register_anim("dying"),
    pain : model::register_anim("pain")
}]

/**
    Derives from {{$actions.LocalAnimationAction}} and is queued as a pain
    effect. The default duration is 600 milliseconds and it uses the
    previously defined PAIN animation. It also cannot be used more than
    once at a time. It only exists on the client.
*/
export var PainAction = @[!server,eactions.LocalAnimationAction.clone({
    name           : "PainAction",
    millis_left    : 600,
    local_animation: anims.pain,
    allow_multiple : false
})]

/**
    Derives from a regular Action. Represents player death and the default
    duration is 5 seconds. Like pain, it cannot be used more than once at
    a time and it's not cancelable. Used on the server (either local or
    remote) - on the client it does nothing.
*/
export var DeathAction = actions.Action.clone({
    name          : "DeathAction",
    allow_multiple: false,
    cancelable    : false,
    millis_left   : 5000,

    /**
        Makes the player unable to move, sets up a possible ragdoll, clears
        the player's actions (except itself as it's not cancelable) and
        emits the "killed" signal on the player.
    */
    __start: func(self) {
        if !msg::is_server() { return }
        var actor = self.actor
        actor.set_attr("can_move", false)
        actor.clear_actions()
        actor.emit("killed")
    },

    /// Triggers a respawn.
    __finish: func(self) {
        if !msg::is_server() { return }
        self.actor.respawn()
    }
})

/**
    The player plugin - use it when baking your player entity prototype. Must be
    used after the game manager player plugin has been baked in (it overrides
    some of its stuff).

    Properties:
        - health - the player's current health.
        - max_health - the maximum health a player can have.
*/
export var player_plugin = {
    __properties: {
        health: svars::StateInteger({ client_set: true }),
        max_health: svars::StateInteger({ client_set: true })
    },

    __init_svars: func(self) {
        self.set_attr("health", 100)
        self.set_attr("max_health", 100)
        self.old_health = self.get_attr("health")
    },

    __activate: func(self) {
        self.connect("health,changed", self.health_on_health)
        if !msg::is_server() { return }
        self.connect("server,respawn", func(self) {
            self.set_attr("health", self.get_attr("max_health"))
            self.old_health = self.get_attr("health")
        })
    },

    get_animation: func(self) {
        var ret = self.__parent_ent_proto::get_animation(self)
        var INDEX, idle = model.anims.INDEX, model.anims.idle
        if self.get_attr("health") > 0 {
            if (ret & INDEX) == anims.dying || (ret & INDEX) == anims.dead {
                self.set_local_animation(idle | model.anim_control.LOOP)
                self.prev_bt = undef
                ret = self.get_attr("animation")
            }
        }
        return ret
    },

    /**
        Overriden so that the "dying" animation is displayed correctly.
    */
    decide_base_time: func(self, anim) {
        if (anim & model.anims.INDEX) == anims.dying {
            var pbt = self.prev_bt
            if !pbt {
                pbt = frame::get_last_millis()
                self.prev_bt = pbt
            }
            return pbt
        }
        return self.get_attr("start_time")
    },

    /**
        Overriden so that the "dying" animation can be used when health is 0
        (and "dead" when at least 1 second after death).
    */
    decide_animation: @[!server,func(self, ...) {
        if self.get_attr("health") > 0 {
            return self.__parent_ent_proto::decide_animation(self, ...)
        } else {
            var anim
            var pbt = self.prev_bt
            if pbt && (frame::get_last_millis() - pbt) > 1000 {
                anim = anims.dead | model.anim_control.LOOP
            } else {
                anim = anims.dying
            }
            return anim | model.anim_flags.NOPITCH | model.anim_flags.RAGDOLL
        }
    }],

    health_on_health: func(self, health, server_orig) {
        var oh = self.old_health
        self.old_health = health
        if !oh { return }
        self.health_changed(health, health - oh, server_orig)
    },

    /**
        There are two variants of this one, for the client and for the server.

        Server:
            Handles death, so the serverside version queues the death action
            if health is <= 0.

        Client:
            The clientside variant handles pain, so it queues the pain action
            if health is > 0 and the diff is lower than -5.

        Arguments:
            - health - the current health.
            - diff - the difference from the old health state.
            - server_orig - true if the change originated on the server.
    */
    health_changed: func(self, health, diff, server_orig) {
        if !msg::is_server_only() && diff <= -5 && health > 0 {
            self.enqueue_action(PainAction())
        }
        if health <= 0 {
            if msg::is_server() {
                self.enqueue_action(DeathAction())
            }
            self.set_attr("client_state", self.State.DEAD)
            self.update_lastdeath()
        }
    },

    /**
        Adds to player's health. If the provided amount is zero, it does
        nothing. The current health also must be larger than 0. Negative
        amount does damage to the player. The result is always clamped
        at 0 on the bottom and at max_health on the top.
    */
    health_add: func(self, amount) {
        var ch = self.get_attr("health")
        if ch > 0 && amount != 0 {
            var mh = self.get_attr("max_health")
            self.set_attr("health", min(mh, max(0, ch + amount)))
        }
    }
}

/** Function: health.is_valid_target
    Returns true if the given player entity is a valid target (for example
    for shooting or other kind of damage). The player must not be editing
    or lagged, its health must be higher than 0 and it must be already
    spawned (the spawn stage must be 0).
*/
export func is_valid_target(ent) {
    if !ent || ent.deactivated { return false }

    var cs = ent.get_attr("client_state")
    if cs == 3 || cs == 4 { return false } // editing, lagged

    var health, sstage = ent.get_attr("health"     ) || 0,
                         ent.get_attr("spawn_stage") || 0

    return health > 0 && sstage == 0
}

var HealthAction = actions.Action.clone({
    cancelable: false,

    __ctor: func(self, kwargs) {
        actions.Action::__ctor(self, kwargs)
        self.health_step = kwargs.health_step
    },

    __finish: func(self) {
        self.actor.health_add(self.health_step)
    }
})

func gethcolor(v, maxv) {
    var mid = maxv / 2
    var r = 1 - max(v - mid, 0) * (1 / mid)
    var g = min(v, mid) * (1 / mid)
    return (floor(g * 0xFF) << 8) | (floor(r * 0xFF) << 16)
}

/**
    A bunch of example uses of the code included in this module.
*/
export var plugins = {
    /**
        A plugin that turns an entity (colliding one) into a "health area". It
        hooks a collision signal to the entity that changes the collider's
        health in steps (optionally, and only if it's a valid target). Bake
        it with an obstacle.
    
        When any of the properties is zero, this won't do anything.
    
        Properties:
            - health_step - the amount of health points to add (when positive)
              or subtract (when negative) in one step.
            - health_step_millis - the amount of time one health step takes
              (the health is taken away at the end of each step). When this
              is negative, the area won't work in steps, instead it'll kill
              the collider when `health_step` is negative or restore maximum
              health when it's positive.
    */
    area: {
        __properties: {
            health_step: svars::StateInteger(),
            health_step_millis: svars::StateInteger()
        },

        __init_svars: func(self) {
            self.set_attr("health_step", -10)
            self.set_attr("health_step_millis", 1000)
        },

        health_area_on_collision: func(self, collider) {
            if collider != ents::get_player() { return }
            if is_valid_target(collider) {
                var step = self.get_attr("health_step")
                if    step == 0 { return }
                var step_millis = self.get_attr("health_step_millis")
                if    step_millis == 0 { return }
    
                if step_millis < 0 {
                    var oldhealth = collider.get_attr("health")
                    collider.set_attr("health", step < 0 && 0
                        || max(oldhealth, collider.get_attr("max_health")))
                } else {
                    var prev = self.health_previous_act
                    if !prev || prev.finished {
                        self.health_previous_act = collider.enqueue_action(
                            HealthAction({ millis_left: step_millis,
                                health_step: step }))
                    }
                }
            }
        },

        __activate: func(self) {
            if msg::is_server_only() { return }
            self.connect("collision", self.health_area_on_collision)
        }
    },

    /**
        Displays a simple HUD health status on the player.
    */
    player_hud: {
        __activate: func(self) {
            if msg::is_server_only() { return }
            if self != ents::get_player() { return }
            gui::get_hud().append(gui::Spacer({ pad_h: 0.1, pad_v: 0.1,
                align_h: 1, align_v: 1
            }), func(sp) {
                self.health_hud_status = sp.append(gui::Label({
                    scale: 2.5, font: "default_outline"
                }), func(st) {
                    var curh = self.get_attr("health")
                    var maxh = self.get_attr("max_health")
                    func updatehud() {
                        st.set_text(tostring(curh))
                        st.set_color(gethcolor(curh, maxh))
                    }
                    self.connect("max_health,changed", func(self, v) {
                        maxh = v; if curh { updatehud() }
                    })
                    self.connect("health,changed", func(self, v) {
                        curh = v; if maxh { updatehud() }
                    })
                    if curh && maxh {
                        updatehud()
                    }
                })
            })
        },

        __deactivate: func(self) {
            if msg::is_server_only() { return }
            if self != ents::get_player() { return }
            self.health_hud_status.destroy()
        }
    },

    /// Kills the player when he falls off the map.
    player_off_map: {
        __activate: func(self) {
            if msg::is_server_only() { return }
            self.connect("off_map", func(ent) {
                if !is_valid_target(ent) { return }
                ent.set_attr("health", 0)
            })
        }
    },

    /**
        Kills the player when in a deadly area, at once when in the `death`
        material and gradually when in lava.
    */
    player_in_deadly_material: {
        __activate: func(self) {
            if msg::is_server_only() { return }
            self.connect("in_deadly", func(ent, mat) {
                if !is_valid_target(ent) { return }
                if mat == edit.material.LAVA {
                    ent.health_add(-1)
                } else {
                    ent.set_attr("health", 0)
                }
            })
        }
    }
}