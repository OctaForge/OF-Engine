/**<
    Reusable teleporter entities.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

@[server] { return }

import core.logger as log
import core.entities.svars

from core.entities.ents import Obstacle, register_prototype, get_static_by_tag
from core.engine.sound import play

from std.math import random as rand

/** Object: teleporters.Teleporter
    A regular invisible teleporter. Derives from {{$ents.Obstacle}}. Properties
    can be specified on creation as first two parameters to newent (the rest
    applies to {{$ents.Obstacle}} properties).

    In edit mode, the links from teleporter to destinations are visualized.

    Properties:
        - destination - an integer from 1 to N (0 by default, as in invalid),
          specifies the teleporter destination number (which is a marker
          tagged teledest_N), there can be multiple destinations and the
          teleporter will select one at random.
        - sound_name - name of the sound to play on teleportation, empty
          by default.
*/
export var Teleporter = Obstacle.clone({
    name: "Teleporter",

    __properties: {
        destination: svars::StateInteger(),
        sound_name : svars::StateString()
    },

    __init_svars: func(self, kwargs, nd) {
        Obstacle::__init_svars(self, kwargs, [ nd.unpack(2) ])
        self.set_attr("destination", 0, nd[0])
        self.set_attr("sound_name", "", nd[1])
    },

    __activate: func(self, kwargs) {
        Obstacle::__activate(self, kwargs)
        self.connect("collision,start", self.on_collision)
    },

    on_collision: func(self, collider) {
        var dest = self.get_attr("destination")
        if dest <= 0 { return }
        var dests = get_static_by_tag("teledest_" ~ dest)
        if dests.len() == 0 {
            log::log(log.ERROR, "No teledest found.")
            return
        }
        dests[rand(0, dests.len())].place_entity(collider)
        var sn = self.get_attr("sound_name")
        if sn != "" { play(sn) }
    },

    get_attached_next: func(self) {
        var dest = self.get_attr("destination")
        if dest <= 0 { return }
        return get_static_by_tag("teledest_" ~ dest).unpack()
    }
})

register_prototype(Teleporter)