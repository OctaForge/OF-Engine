/**<
    Various types of particle effects. All of the entity types here
    derive from {{$ents.ParticleEffect}}.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

@[server] { return }

import core.entities.svars

from core.entities.ents import ParticleEffect, register_prototype
from core.engine.particles import flame, splash, flags as pflags,
    register_renderer_quad as quadrenderer

from std.math import min, random as rand

/** Table: particles.renderers
    Provides some extra renderers - "smoke", "flame" and "steam" used
    by the effect entities.
*/
var renderers = {
    smoke: quadrenderer("smoke", "media/particle/smoke",
        pflags.FLIP | pflags.LERP),
    flame: quadrenderer("flame", "media/particle/flames",
        pflags.HFLIP | pflags.RND4 | pflags.BRIGHT),
    steam: quadrenderer("steam", "media/particle/steam", pflags.FLIP)
}

var cmap = [ "x", "y", "z" ]

/** Function: particles.offset_vec
    This adds or subtracts the distance to the vector component given by
    the direction, 0 is z with addition, 1 is x with addition, 2 is
    y with addition, 3 is z with subtraction, 4 is x with subtraction,
    5 is y with subtraction.

    Arguments:
        - v - a vector, any object with members x, y, z (that are numbers).
        - dir - a direction (0 to 5 where 0 is up).
        - dist - a distance.
*/
export func offset_vec(v, dir, dist) {
    var e = cmap[((2 + dir) % 3)]
    v[e] = v[e] + ((dir > 2) && -dist || dist)
    return v
}

var SMOKE, FLAME = renderers.smoke, renderers.flame

/** Object: particles.FireEffect
    A regular fire effect. You can specify radius, height, red, green and blue
    values as newent arguments.

    Properties:
        - radius - the fire radius, defaults to 1.5.
        - height - the fire height, defaults to 0.5.
        - red, green, blue - the color values (they default to 0x903020).
*/
export var FireEffect = ParticleEffect.clone({
    name: "FireEffect",

    __attr_names: [ "radius", "height", "red", "green", "blue" ],

    __properties: {
        radius: svars::StateFloat(),
        height: svars::StateFloat(),
        red   : svars::StateInteger(),
        green : svars::StateInteger(),
        blue  : svars::StateInteger()
    },

    __init_svars: func(self, kwargs, nd) {
        ParticleEffect::__init_svars(self, kwargs, nd)
        self.set_attr("radius", 1.5, nd[0])
        self.set_attr("height", 0.5, nd[1])
        self.set_attr("red",   0x90, nd[2])
        self.set_attr("green", 0x30, nd[3])
        self.set_attr("blue",  0x20, nd[4])
    },

    __get_edit_color: func(self) {
        return self.get_attr("red"), self.get_attr("green"),
            self.get_attr("blue")
    },

    __get_edit_info: func(self) {
        return "red :\f2 %d \f7| green :\f2 %d \f7| blue :\f2 %d\n\f7"
               "radius :\f2 %.3f \f7| height :\f2 %.3f".format(
            self.get_attr("red"), self.get_attr("green"),
            self.get_attr("blue"), self.get_attr("radius"),
            self.get_attr("height"))
    },

    __emit_particles: func(self) {
        var radius = self.get_attr("radius")
        var height = self.get_attr("height")
        var r, g, b = self.get_attr("red"), self.get_attr("green"),
            self.get_attr("blue")
        var pos = self.get_attr("position")
        var spos = { x: pos.x, y: pos.y, z: pos.z + 4 * min(radius, height) }
        flame(FLAME, pos, radius, height, r / 255, g / 255, b / 255)
        flame(SMOKE, spos, radius, height, 0x30 / 255, 0x30 / 255,
            0x20 / 255, 2000, 1, 4, 100, -20)
    }
})

var STEAM = renderers.steam

/** Object: particles.SteamEffect
    A steam effect. You can pass the direction via newent.

    Properties:
        - direction - see $offset_vec.
*/
export var SteamEffect = ParticleEffect.clone({
    name: "SteamEffect",

    __attr_names: [ "direction" ],

    __properties: {
        direction: svars::StateInteger()
    },

    __init_svars: func(self, kwargs, nd) {
        ParticleEffect::__init_svars(self, kwargs, nd)
        self.set_attr("direction", 0, nd[0])
    },

    __get_edit_info: func(self) {
        return "direction :\f2 %d".format(self.get_attr("direction"))
    },

    __emit_particles: func(self) {
        var dir = self.get_attr("direction")
        var pos = self.get_attr("position")
        var d = offset_vec({ x: pos.x, y: pos.y, z: pos.z }, dir, rand(10))
        splash(STEAM, d, 50, 1, 0x89 / 255, 0x76 / 255, 0x61 / 255,
            200, 2.4, -20)
    }
})

register_prototype(FireEffect)
register_prototype(SteamEffect)