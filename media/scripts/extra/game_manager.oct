/**<
    A game manager module that manages spawning and teams, with the
    possibility of various plugins.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

/// Module: game_manager
var M = {}

import core.logger as log

import core.events.signal
import core.entities.svars
import core.entities.ents
import core.network.msg
var connect, emit = signal.connect, signal.emit

var get

/**
    Player-side game manager functionality. If you want to use the game
    game manager, you need to set up your player entity prototype with this
    plugin.

    Properties:
        - team - the player's current team. Defaults to an empty string.
        - spawn_stage - the current spawn stage the player is going through.
*/
M.player_plugin = {
    __properties: {
        team       : svars::StateString(),
        spawn_stage: svars::StateInteger()
    },

    __init_svars: func(self) {
        self.set_attr("team", "")
    },

    __activate: func(self) {
        connect(self, "spawn_stage,changed", self.game_manager_on_spawn_stage)
        if msg::is_server() {
            get().pick_team(self)
            connect(self, "pre_deactivate", func(self) {
                get().leave_team(self)
            })
        }
        @[!server] {
            connect(self, "client,respawn", func(self) {
                get().place_player(self)
            })
        }
        if msg::is_server() {
            self.game_manager_respawn()
        }
    },

    game_manager_respawn: func(self) {
        @[!server] {
            if !msg::is_server() { return }
            if !msg::is_server_only() {
                self.set_attr("can_move", true)
                emit(self, "client,respawn")
                return
            }
        }
        self.set_attr("spawn_stage", 1)
    },

    game_manager_spawn_stage_0: func(self, auid) { },

    game_manager_spawn_stage_1: func(self, auid) {
        if msg::is_server() { return }
        self.set_attr("spawn_stage", 2)
    },

    game_manager_spawn_stage_2: func(self, auid) {
        if !msg::is_server() { return }
        if auid == self.uid {
            self.set_attr("spawn_stage", 3)
        }
        self.cancel_sdata_update()
    },

    game_manager_spawn_stage_3: func(self, auid) {
        if msg::is_server() { return }
        if self == ents::get_player() {
            emit(self, "client,respawn")
            self.set_attr("spawn_stage", 4)
        }
    },

    game_manager_spawn_stage_4: func(self, auid) {
        if !msg::is_server() { return }
        self.set_attr("can_move", true)
        self.set_attr("spawn_stage", 0)
        self.cancel_sdata_update()
    },

    game_manager_on_spawn_stage: func(self, stage, auid) {
        self["game_manager_spawn_stage_" ~ stage](self, auid)
    }
}

from std.table import pairs
from std.math import random as rand, floor

var Entity = ents.Entity

var GameManager = Entity.clone({
    name: "GameManager",

    __properties: {
        team_data: svars::StateTable()
    },

    __activate: func(self) {
        Entity::__activate(self)
        if !msg::is_server() { return }
        self.add_tag("game_manager")
        self.teams = {}
    },

    get_players: func(self) {
        if !msg::is_server() { return undef }
        var players = []
        for i, team in pairs(self.teams) {
            for i, v in team.player_list.each() {
                players.push(v)
            }
        }
        return players
    },

    start_game: func(self) {
        if !msg::is_server() { return }
        var players = self.get_players()

        for i, team in pairs(self.teams) {
            team.player_list = []
        }

        while players.len() > 0 {
            var pl = players.remove(rand(0, players.len()))
            self.pick_team(pl, false)
        }
        self.sync_team_data()

        for i, player in self.get_players().each() {
            player.game_manager_respawn()
        }

        emit(self, "game,start")
        self.game_running = true
    },

    end_game: func(self) {
        if !msg::is_server() { return }
        self.game_running = false
        emit(self, "game,end")
    },

    sync_team_data: func(self) {
        if !msg::is_server() { return }
        if !self.deactivated {
            self.set_attr("team_data", self.teams)
        }
    },

    pick_team: func(self, player, sync) {
    },

    set_player_team: func(self, player, team, sync) {
    },

    leave_team: func(self, player, sync) {
    },

    place_player: func(self, player) {
        var team = player.get_attr("team")
        var st
        if team == "" {
            st = "player_start"
        } else {
            st = "player_start_" ~ team
        }
        var starts = ents::get_static_by_tag(st)
        if starts && starts.len() > 0 {
            starts[rand(0, starts.len())].place_entity(player)
            return
        }
        log::log(log.WARNING, 'player start !found (\"%s\"), '
                              'placing player elsewhere'.format(st))
        player.set_attr("position", [ 512, 512, 571 ])
    },

    set_local_animation: func(self) { },
    set_local_animation_flags: func(self) { }
})

from std.util import assert

var gameman

/// Gets the current game manager instance.
M.get = func() {
    if !gameman {
        gameman = ents::get_by_prototype("GameManager").first()
    }
    assert(gameman)
    return gameman
}
get = M.get

/**
    Sets up the game manager. You should call this in your gamescript.
    On the server (or local client), this returns the entity.
*/
M.setup = func(plugins) {
    ents::register_prototype(GameManager, plugins)
    if !msg::is_server() { return undef }
    gameman = ents::new("GameManager")
    return gameman
}

return M
