/**<
    A day manager module. It can control all kinds of things, from a basic
    day-night cycle to weather. It's server controlled (time management
    happens on the server) with clientside effect.

    The controller entity runs in the background.
*/

import core.events.signal
import core.entities.ents
import core.entities.svars
import core.engine.lights
import core.engine.edit
import core.network.msg

var get

from core.entities.ents import Entity

/**
    This is the day manager entity prototype.
*/
var DayManager = Entity.clone({
    name: "DayManager",

    __properties: {
        day_seconds: svars::StateInteger(),
        day_progress: svars::StateInteger({ reliable: false })
    },

    __init_svars: func(self) {
        Entity::__init_svars(self)
        self.set_attr("day_seconds", 40)
        self.set_attr("day_progress", 0)
    },

    __activate: func(self) {
        Entity::__activate(self)
        if !msg::is_server() { return }
        self.day_seconds_s = self.get_attr("day_seconds")
        signal::connect(self, "day_seconds,changed", func(self, v) {
            self.day_seconds_s = v
        })
        self.day_progress_s = 0
    },

    __run: func(self, millis) {
        Entity::__run(self, millis)
        if !msg::is_server() { return }
        var dm = self.day_seconds_s * 1000
        if dm == 0 { return }
        var dp = self.day_progress_s
        dp += millis
        if dp >= dm { dp -= dm }
        self.set_attr("day_progress", dp)
        self.day_progress_s = dp
    }
})

var dayman

/// Gets the day manager instance.
get = func() {
    if !dayman {
        dayman = ents::get_by_prototype("DayManager").first()
    }
    if !dayman {
        raise "unable to create day manager"
    }
    return dayman
}
export get

/**
    Sets up the day manager. You should call this in your map script before
    {{$ents.load}}. You can provide various plugins. This module implements
    a handful of plugins that you can use. On the server (or local client)
    this returns the entity.
*/
export func setup(plugins) {
    ents::register_prototype(DayManager, plugins)
    if !msg::is_server() { return undef }
    dayman = ents::add("DayManager")
    return dayman
}

func getsunscale(dayprog) {
    // the numbers here are very approximate, in reality they'd depend
    // on the which part of the year it is - here the sun is at the horizon
    // by 6 AM and 6 PM respectively (equally long night and day) so we need
    // the sunlightscale at 0 by 6 PM and rising up to 1 from 6 AM (so that
    // we don't get shadows from the bottom) - both dawn and dusk take 2
    // hours... TODO: more configurable system where you can set how long
    // is day and night (and affect actual seasons)
    var r1, r2 = 0.67, 0.75 // dusk: 4 - 6 hrs
    var d1, d2 = 0.25, 0.33 // dawn: 6 - 8 hrs
    if dayprog > d2 && dayprog < r1 { return 1 }
    if dayprog > r2 || dayprog < d1 { return 0 }
    if dayprog > r1 {
        return (r2 - dayprog) / (r2 - r1)
    }
    return (dayprog - d1) / (d2 - d1)
}

func getsunparams(daytime, daylen) {
    var mid = daylen / 2
    var yaw = 360 - (daytime / daylen) * 360
    var pitch
    if daytime <= mid {
        pitch = (daytime / mid) * 180 - 90
    } else {
        pitch = 90 - ((daytime - mid) / mid) * 180
    }
    return yaw, pitch, getsunscale(daytime / daylen)
}

/**
    Various plugins for the day manager.
*/
export var plugins = {
    /**
        A plugin that adds day/night cycles to the day manager. It works
        by manipulating the sunlight yaw and pitch.
    */
    day_night: {
        __activate: func(self) {
            if msg::is_server_only() { return }
            var daylen = self.get_attr("day_seconds")
            signal::connect(self, "day_seconds,changed", func(self, v) {
                daylen = v
            })
            signal::connect(self, "day_progress,changed", func(self, v) {
                if !daylen { return }
                if edit::player_is_editing() { return }
                self.sun_changed_dir = true
                var yaw, pitch, scale = getsunparams(v, daylen * 1000)
                lights::set_sun_yaw_pitch(yaw, pitch)
                lights::set_sunlight_scale(scale)
                lights::set_skylight_scale(scale)
            })
        },

        __run: func(self) {
            if msg::is_server_only() { return }
            if self.sun_changed_dir && edit::player_is_editing() {
                lights::reset_sun()
                self.sun_changed_dir = false
            }
        }
    }
}