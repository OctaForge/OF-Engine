/**<
    A main file for the "octacraft" test game. It's meant to be a
    Minecraft inspired demo with procedural world generation.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import core.logger as log

import core.engine.input
import core.events.input as inputev
import core.events.actions
import core.engine.edit
import core.engine.cubescript as cs
import core.events.signal
import core.entities.svars
import core.entities.ents

import extra.game_manager
import extra.day_manager
import extra.health

var Player = ents.Player

/** Object: GamePlayer
    This serves as a base for our player.
*/
var GamePlayer = Player.clone({
    name: "GamePlayer"
})

ents::register_prototype(GamePlayer, [
    game_manager.player_plugin,
    health.player_plugin,
    health.plugins.player_hud,
    health.plugins.player_off_map,
    health.plugins.player_in_deadly_material
])

@[!server] ents::register_prototype(ents.Obstacle, [ health.plugins.area ],
    "HealthArea")

//day_manager::setup([ day_manager.plugins.day_night ])

ents::set_player_prototype("GamePlayer")

@[server] {
    return
}

var MouseAction = actions.Action.clone({
    name: "MouseAction",
    allow_multiple: false,
    block_size: 4,

    __start: func(self) {
        self.counter = 0
        self.try_block()
    },

    __run: func(self, millis) {
        var cnt = self.counter
        cnt += millis
        var btn = self.button
        if (btn == 1 && cnt >= 600) || (btn != 1 && cnt >= 200) {
            self.counter = 0
            self.try_block()
        } else {
            self.counter = cnt
        }
        return false
    },

    try_block: func(self) {
        var pl = self.player
        var tg = input::get_target_position()
        var pos = pl.get_attr("position").copy()
        pos.z += pl.get_attr("eye_height")
        var bf
        if self.button == 1 {
            tg.add((tg - pos).normalize())
            bf = edit.cube_delete
        } else {
            tg.sub((tg - pos).normalize())
            bf = edit.cube_create
        }
        var bsize = self.block_size
        bf(tg.x >> bsize << bsize, tg.y >> bsize << bsize,
           tg.z >> bsize << bsize, 1 << bsize)
    }
})

inputev::set_event("click", func(btn, down, x, y, z, ent, cx, cy) {
    if ent && ent.click {
        return ent.click(btn, down, x, y, z, cx, cy)
    }
    var gm = game_manager::get()
    if down {
        var pl = ents::get_player()
        var mact = MouseAction()
        mact.button = btn
        mact.player = pl
        gm.mouse_action = mact
        gm.enqueue_action(mact)
    } else {
        gm.mouse_action.cancel()
        gm.mouse_action = undef
    }
})
