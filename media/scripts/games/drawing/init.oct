/**<
    A test "game" for OctaForge that lets you draw on the world geometry.
    Left click to draw, right click to stop drawing, middle click to change
    colors.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import core.logger as log

import core.engine.input
import core.events.input as inputev
import core.engine.cubescript as cs
import core.entities.svars
import core.entities.ents
import core.engine.particles
import core.network.msg

from std.conv import hex_to_rgb
from std.geom import Vec3, Vec4

import extra.game_manager
import extra.day_manager
import extra.health

var colors = [
    0xFFFFFF, 0xFF0000, 0xFFFF00, 0x00FF00, 0x00FFFF, 0x0000FF, 0xFF00FF
]

var SPARK, STREAK

@[!server] SPARK = particles::register_renderer_quad("spark",
    "media/particle/spark", particles.flags.FLIP | particles.flags.BRIGHT)
@[!server] STREAK = particles::register_renderer_tape("streak",
    "media/particle/flare", particles.flags.BRIGHT)

/** Object: GamePlayer
    This serves as a base for our player. It defines all the basic entry
    points for the drawing game.

    Properties:
        - new_mark - contains mark data. It's required because it has to sync
          over the server (e.g. in coop).
*/
var GamePlayer = ents.Player.clone({
    name: "GamePlayer",

    __properties: {
        new_mark: svars::StateArrayFloat({
            client_set: true, has_history: false
        })
    },

    next_color: func(self) {
        self.color_id = (self.color_id + 1) % colors.len()
        self.color = colors[self.color_id]
        log::echo("color switch: 0x%.6X".format(self.color))
    },

    reset_mark: func(self) {
        self.set_attr("new_mark", [ -1, -1, -1, -1 ])
        self.stop_batch = true
    },

    /** Function: __activate
        Called on entity activation. Connects a callback to state data
        change of new_mark.
    */
    __activate: func(self, kwargs) {
        ents.Player::__activate(self, kwargs)
        if msg::is_server_only() { return }

        self.marks    = []
        self.color_id = 0
        self.color    = colors[0]
        self.connect("new_mark,changed", func(self, nm) {
            if nm.len() == 4 {
                nm = Vec4(nm[0], nm[1], nm[2], nm[3])
            } else {
                nm = undef
            }
            self.marks.push(nm)
        })
    },

    /** Function: __run
        Called every frame. It goes over the marks and draws everything.
    */
    __run: func(self, millis) {
        ents.Player::__run(self, millis)
        if msg::is_server_only() { return }

        var last  = undef
        var marks = self.marks

        for i, mark in marks.each() {
            if last && mark && mark.x >= 0 && last.x >= 0 {
                var r, g, b = hex_to_rgb(mark.w)
                particles::flare(STREAK, mark, last, r / 255, g / 255, b / 255,
                    0, 1)
                particles::flare(STREAK, last, mark, r / 255, g / 255, b / 255,
                    0, 1)
            }
            last = mark
        }

        var newb =  marks.empty() || !marks[marks.len() - 2]
        var conb = !marks.empty() &&  marks[marks.len() - 2]

        if conb && !self.stop_batch && self == ents::get_player() {
            var mark = marks[marks.len() - 2]
            var r, g, b = hex_to_rgb(mark.w)
            particles::splash(SPARK, mark, 25, 10, r / 255, g / 255, b / 255,
                150, 1, 1)
        }

        if self.pressing {
            var newp = input::get_target_position()
            var topl = self.get_attr("position").sub_new(newp)
            newp.add(topl.normalize())
            if newb || (marks[marks.len() - 2].dist(newp) > 5) {
                var p = newp.to_array()
                p.push(self.color)
                self.set_attr("new_mark", p)
            }
        }
    }
})

ents::register_prototype(GamePlayer, [
    game_manager.player_plugin,
    health.player_plugin,
    health.plugins.player_hud,
    health.plugins.player_off_map,
    health.plugins.player_in_deadly_material
])

@[!server] ents::register_prototype(ents.Obstacle, [ health.plugins.area ],
    "HealthArea")

//day_manager::setup([ day_manager.plugins.day_night ])

@[!server] {
    inputev::set_event("click", func(btn, down, x, y, z, ent, cx, cy) {
        if ent && ent.click {
            return ent.click(btn, down, x, y, z, cx, cy)
        }
        if btn == 1 {
            ents::get_player().pressing   = down
            ents::get_player().stop_batch = false
        } else if btn == 2 && down {
            ents::get_player().reset_mark()
        } else if btn == 3 && down {
            ents::get_player().next_color()
        }
    })
}

ents::set_player_prototype("GamePlayer")
