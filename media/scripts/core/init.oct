/**<
    Loads all required core modules, sets up logging, loads the FFI
    and sets up the default environment.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import luastate

import std.table
import std.debug

from std.math  import randomseed
from std.os    import time
from std.conv  import tostring

// init a random seed
randomseed(time())

/**
    Traces what OctaScript does and logs it into the console. Not in use by
    default. Very verbose. Use only when absolutely required. Uncomment
    the sethook line to use it. Takes two arguments, the caught event and
    the line on which the event was caught.

    Does not get logged, just printed into the console.

    ```
    debug::sethook(trace, "c")
    ```
*/
var trace = func(event, line) {
    var s = debug::getinfo(2, "nSl")
    print "DEBUG:"
    print "    " ~ tostring(s.name)
    print "    " ~ tostring(s.namewhat)
    print "    " ~ tostring(s.source)
    print "    " ~ tostring(s.short_src)
    print "    " ~ tostring(s.linedefined)
    print "    " ~ tostring(s.lastlinedefined)
    print "    " ~ tostring(s.what)
    print "    " ~ tostring(s.currentline)
}

//debug::sethook(trace, "c")

import capi

// patch capi
import core.capi as undef

capi::log(1, "Initializing logging.")

import core.logger as log

import core.externals as undef

log::log(log.DEBUG, "Initializing the core library.")

log::log(log.DEBUG, ":: OctaScript extensions.")
import core.octascript as undef

log::log(log.DEBUG, ":: Network system.")
import core.network as undef

log::log(log.DEBUG, ":: Event system.")
import core.events as undef

log::log(log.DEBUG, ":: Engine system.")
import core.engine as undef

log::log(log.DEBUG, ":: Entity system.")
import core.entities as undef

log::log(log.DEBUG, ":: GUI.")
import core.gui as undef

log::log(log.DEBUG, "Core scripting initialization complete.")

import std
