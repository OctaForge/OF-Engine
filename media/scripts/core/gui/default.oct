import capi
import std.ffi
import core.engine.cubescript as cs
import core.engine.edit
import core.engine.input
import core.engine.changes
import core.events.signal
import core.entities.ents
import core.entities.svars
import core.gui.core as gui

var root = gui::get_root()

var Color = gui.Color
var connect = signal.connect

from std.conv import tostring
from std.math import min
from std.table import pairs

// buttons

var btnp  = [ "label", "min_w", "min_h" ]
var btnv  = { __properties: btnp }
var btnvb = { __properties: btnp }
gui.Button.__variants = { default: btnv, nobg: btnvb }

var btnv_init_clone = \dis -> func(self, btn) {
    var lbl = gui::Label({ text: btn.label, color: dis ? 0x50FFFFFF : 0xFFFFFF })
    self.append(lbl)
    connect(btn, "label,changed", func(b, t) { lbl.set_text(t) })
}

var btn_build_variant = \color, ic, dis -> gui::Gradient({
    color: dis ? 0x50202020 : 0x202020, color2: dis ? 0x50101010 : 0x101010,
    clamp_h: true, init_clone: func(self, btn) {
        self.set_min_w(btn.min_w || 0)
        self.set_min_h(btn.min_h || 0)
        connect(btn, "min_w,changed", \b, v -> self.set_min_w(v))
        connect(btn, "min_h,changed", \b, v -> self.set_min_w(v))
    } }, gui::Outline({
        color: (dis ? (0x50 << 24) : 0) | color, clamp_h: true }, gui::Spacer({
            pad_h: 0.01, pad_v: 0.005, clamp_h: true,
            init_clone: ic || btnv_init_clone(dis)
        })))

var btn_build_variant_nobg = \dis -> gui::Filler({
    clamp_h: true, init_clone: func(self, btn) {
        self.set_min_w(btn.min_w || 0)
        self.set_min_h(btn.min_h || 0)
        connect(btn, "min_w,changed", \b, v -> self.set_min_w(v))
        connect(btn, "min_h,changed", \b, v -> self.set_min_w(v))
    } }, gui::Spacer({
        pad_h: 0.01, pad_v: 0.005, init_clone: btnv_init_clone(dis)
    }))

btnv["default"     ] = btn_build_variant(0x303030)
btnv["hovering"    ] = btn_build_variant(0x505050)
btnv["clicked_left"] = btn_build_variant(0x404040)
btnv["disabled"    ] = btn_build_variant(0x303030, undef, true)

btnvb["default"     ] = btn_build_variant_nobg()
btnvb["hovering"    ] = btn_build_variant(0x404040)
btnvb["clicked_left"] = btn_build_variant(0x303030)
btnvb["disabled"    ] = btn_build_variant_nobg(true)

var mbtnv, vmbtnv, smbtnv, cbtnv =
    { __properties: btnp },
    { __properties: btnp },
    { __properties: btnp },
    { __properties: btnp }
gui.MenuButton.__variants = { default: mbtnv, visible: vmbtnv,
    submenu: smbtnv, combobox: cbtnv }

mbtnv["default"     ] = btn_build_variant_nobg()
mbtnv["hovering"    ] = btn_build_variant_nobg()
mbtnv["menu"        ] = btn_build_variant(0x404040)
mbtnv["clicked_left"] = btn_build_variant(0x404040)
mbtnv["disabled"    ] = btn_build_variant_nobg(true)

vmbtnv["default"     ] = btn_build_variant(0x303030)
vmbtnv["hovering"    ] = btn_build_variant(0x505050)
vmbtnv["menu"        ] = btn_build_variant(0x404040)
vmbtnv["clicked_left"] = btn_build_variant(0x404040)
vmbtnv["disabled"    ] = btn_build_variant(0x303030, undef, true)

smbtnv["default"     ] = btn_build_variant_nobg()
smbtnv["hovering"    ] = btn_build_variant(0x404040)
smbtnv["menu"        ] = btn_build_variant(0x404040)
smbtnv["clicked_left"] = btn_build_variant(0x404040)
smbtnv["disabled"    ] = btn_build_variant_nobg(true)

var cbox_init_clone = \col, dis -> func(self, btn) {
    var lbl
    self.append(gui::HBox({ clamp_h: true }), func(bx) {
        lbl = bx.append(gui::Label({ text: btn.label,
            color: dis ? 0x50FFFFFF : 0xFFFFFF }))
        bx.append(gui::Triangle({ style: gui.Triangle.OUTLINE,
            color: col, min_w: 0.015, min_h: 0.015, angle: 180
        }, gui::Triangle({ color: col, min_w: 0.015, min_h: 0.015,
            angle: 180 })))
    })
    connect(btn, "label,changed", func(b, t) { lbl.set_text(t) })
}

cbtnv["default"     ] = btn_build_variant(0x303030, cbox_init_clone(0x404040))
cbtnv["hovering"    ] = btn_build_variant(0x505050, cbox_init_clone(0x606060))
cbtnv["menu"        ] = btn_build_variant(0x404040, cbox_init_clone(0x404040))
cbtnv["clicked_left"] = btn_build_variant(0x404040, cbox_init_clone(0x404040))
cbtnv["disabled"    ] = btn_build_variant(0x303030, cbox_init_clone(0x404040,
    true), true)

// (v)slot viewer buttons

var slotbtn_init_clone = func(self, btn) {
    self.set_min_w(btn.min_w || 0)
    self.set_min_h(btn.min_h || 0)
    self.set_index(btn.index || 0)
    connect(btn, "min_w,changed", \b, v -> self.set_min_w(v))
    connect(btn, "min_h,changed", \b, v -> self.set_min_h(v))
    connect(btn, "index,changed", \b, v -> self.set_index(v))
}

gui.Button.__variants.vslot = {
    __properties: [ "index", "min_w", "min_h" ],
    default: gui::VSlotViewer({ init_clone: slotbtn_init_clone }),
    hovering: gui::VSlotViewer({ init_clone: slotbtn_init_clone },
        gui::Outline({ clamp: true, color: 0x606060 })),
    clicked_left: gui::VSlotViewer({ init_clone: slotbtn_init_clone },
        gui::Outline({ clamp: true, color: 0x505050 }))
}

gui.Button.__variants.slot = {
    __properties: [ "index", "min_w", "min_h" ],
    default: gui::SlotViewer({ init_clone: slotbtn_init_clone }),
    hovering: gui::SlotViewer({ init_clone: slotbtn_init_clone },
        gui::Outline({ clamp: true, color: 0x606060 })),
    clicked_left: gui::SlotViewer({ init_clone: slotbtn_init_clone },
        gui::Outline({ clamp: true, color: 0x505050 }))
}

// editors

gui.TextEditor.__variants = {
    default: {
        __children: [
            gui::ColorFiller({
                color: 0x80202020, clamp: true
            }, gui::Outline({ clamp: true, color: 0x303030 }))
        ],
        __init: func(ed) {
            ed.set_pad_l(0.005)
            ed.set_pad_r(0.005)
        }
    }
}
gui.Field.__variants    = gui.TextEditor.__variants
gui.KeyField.__variants = gui.TextEditor.__variants

// menus, tooltips

gui.Filler.__variants = {
    menu: {
        __children: [ gui::ColorFiller({ color: 0xF0101010, clamp: true },
            gui::Outline({ color: 0x303030, clamp: true })) ]
    },
    edithud: {
        __children: [ gui::Gradient({ color: 0xF0303030, color2: 0xF0101010,
            clamp: true,
        }, gui::Outline({ color: 0x404040, clamp: true })) ]
    },
    tooltip: {
        __properties: [ "label" ],
        __children: [ gui::Gradient({
            color: 0xF0202020, color2: 0xF0101010
        }, gui::Outline({
            color: 0x303030, clamp: true
        }, gui::Spacer({
            pad_h: 0.01, pad_v: 0.005, init_clone: func(self, ttip) {
                var lbl = gui::Label({ text: ttip.label })
                self.append(lbl)
                connect(ttip, "label,changed", func(o, t) {
                    lbl.set_text(t) })
            }
        }))) ]
    }
}

// checkboxes, radioboxes

var ckbox_build_variant = \color, tgl, dis -> gui::ColorFiller({
    color: dis ? 0x50202020 : 0x202020, min_w: 0.02, min_h: 0.02
}, gui::Outline({
    color: (dis ? (0x50 << 24) : 0) | color, clamp: true
}, tgl && gui::Spacer({
    pad_h: 0.005, pad_v: 0.005, clamp: true
}, gui::ColorFiller({
    clamp: true, color: dis ? 0x50C0C0C0 : 0xC0C0C0
}, gui::Outline({ color: color, clamp: true }))) || undef))

var rdbtn_build_variant = \color, tgl, dis -> gui::Circle({
    color: dis ? 0x50202020 : 0x202020, min_w: 0.02, min_h: 0.02
}, gui::Circle({
    style: gui.Circle.OUTLINE, color: (dis ? (0x50 << 24) : 0) | color,
    clamp: true,
}, tgl && gui::Spacer({
    pad_h: 0.005, pad_v: 0.005, clamp: true
}, gui::Circle({
    clamp: true, color: dis ? 0x50C0C0C0 : 0xC0C0C0
}, gui::Circle({
    style: gui.Circle.OUTLINE, color: color,
    clamp: true
}))) || undef))

var ckboxv, rdbtnv = {}, {}

gui.Toggle.__variants = {
    checkbox: ckboxv,
    radiobutton: rdbtnv
}

ckboxv["default"         ] = ckbox_build_variant(0x303030)
ckboxv["default_hovering"] = ckbox_build_variant(0x505050)
ckboxv["default_focused" ] = ckbox_build_variant(0x606060)
ckboxv["default_disabled"] = ckbox_build_variant(0x303030, false, true)
ckboxv["toggled"         ] = ckbox_build_variant(0x404040, true)
ckboxv["toggled_hovering"] = ckbox_build_variant(0x505050, true)
ckboxv["toggled_focused" ] = ckbox_build_variant(0x606060, true)
ckboxv["toggled_disabled"] = ckbox_build_variant(0x404040, true, true)
rdbtnv["default"         ] = rdbtn_build_variant(0x303030)
rdbtnv["default_hovering"] = rdbtn_build_variant(0x505050)
rdbtnv["default_focused" ] = rdbtn_build_variant(0x606060)
rdbtnv["default_disabled"] = rdbtn_build_variant(0x303030, false, true)
rdbtnv["toggled"         ] = rdbtn_build_variant(0x404040, true)
rdbtnv["toggled_hovering"] = rdbtn_build_variant(0x505050, true)
rdbtnv["toggled_focused" ] = rdbtn_build_variant(0x606060, true)
rdbtnv["toggled_disabled"] = rdbtn_build_variant(0x404040, true, true)

// scrollbars

var sb_buildh = \lac, rac, sl -> gui::Outline({
    clamp_h: true, color: 0x303030
},
gui::Filler({ min_w: sl ? 0.03 : 0.02, min_h: sl ? 0.03 : 0.02, align_h: -1 },
    gui::Triangle({ style: gui.Triangle.OUTLINE,
        color: lac, min_w: sl ? 0.015 : 0.01, min_h: sl ? 0.015 : 0.01, angle: 90
    }, sl ? gui::Triangle({ color: lac, min_w: 0.015, min_h: 0.015, angle: 90 }) : undef)),
gui::Filler({ min_w: sl ? 0.03 : 0.02, min_h: sl ? 0.03 : 0.02, align_h: 1 },
    gui::Triangle({ style: gui.Triangle.OUTLINE,
        color: rac, min_w: sl ? 0.015 : 0.01, min_h: sl ? 0.015 : 0.01, angle: -90
    }, sl ? gui::Triangle({ color: rac, min_w: 0.015, min_h: 0.015, angle: -90 }) : undef)
))

var sb_buildv = \lac, rac, sl -> gui::Filler({
    clamp_v: true
}, gui::Filler({ min_w: sl ? 0.03 : 0.02, min_h: sl ? 0.03 : 0.02, align_v: -1 },
    gui::Triangle({ style: gui.Triangle.OUTLINE,
        color: lac, min_w: sl ? 0.015 : 0.01, min_h: sl ? 0.015 : 0.01
    }, sl ? gui::Triangle({ color: lac, min_w: 0.015, min_h: 0.015 }) : undef)),
gui::Filler({ min_w: sl ? 0.03 : 0.02, min_h: sl ? 0.03 : 0.02, align_v: 1 },
    gui::Triangle({ style: gui.Triangle.OUTLINE,
        color: rac, min_w: sl ? 0.015 : 0.01, min_h: sl ? 0.015 : 0.01, angle: 180
    }, sl ? gui::Triangle({ color: rac, min_w: 0.015, min_h: 0.015, angle: 180 }) : undef)
))

gui.ScrollButton.__variants = {
    default: {
        default: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.015, min_h: 0.015 },
            gui::Outline({ clamp: true, color: 0x404040 })),
        hovering: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.015, min_h: 0.015 },
            gui::Outline({ clamp: true, color: 0x606060 })),
        clicked_left: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.015, min_h: 0.015 },
            gui::Outline({ clamp: true, color: 0x505050 }))
    }
}

gui.HScrollbar.__variants = {
    default: {
        default           : sb_buildh(0x404040, 0x404040),
        left_hovering     : sb_buildh(0x606060, 0x404040),
        left_clicked_left : sb_buildh(0x505050, 0x404040),
        right_hovering    : sb_buildh(0x404040, 0x606060),
        right_clicked_left: sb_buildh(0x404040, 0x505050),
        __init: func(self) { self.set_arrow_size(0.02) }
    }
}

gui.VScrollbar.__variants = {
    default: {
        default          : sb_buildv(0x404040, 0x404040),
        up_hovering      : sb_buildv(0x606060, 0x404040),
        up_clicked_left  : sb_buildv(0x505050, 0x404040),
        down_hovering    : sb_buildv(0x404040, 0x606060),
        down_clicked_left: sb_buildv(0x404040, 0x505050),
        __init: func(self) { self.set_arrow_size(0.02) }
    }
}

// sliders

gui.SliderButton.__variants = {
    default: {
        default: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.03, min_h: 0.03 },
            gui::Outline({ clamp: true, color: 0x404040 })),
        hovering: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.03, min_h: 0.03 },
            gui::Outline({ clamp: true, color: 0x606060 })),
        clicked_left: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.03, min_h: 0.03 },
            gui::Outline({ clamp: true, color: 0x505050 }))
    }
}

gui.HSlider.__variants = {
    default: {
        default           : sb_buildh(0x404040, 0x404040, true),
        left_hovering     : sb_buildh(0x606060, 0x404040, true),
        left_clicked_left : sb_buildh(0x505050, 0x404040, true),
        right_hovering    : sb_buildh(0x404040, 0x606060, true),
        right_clicked_left: sb_buildh(0x404040, 0x505050, true),
        __init: func(self) { self.set_arrow_size(0.03) }
    }
}

gui.VSlider.__variants = {
    default: {
        default          : sb_buildv(0x404040, 0x404040, true),
        up_hovering      : sb_buildv(0x606060, 0x404040, true),
        up_clicked_left  : sb_buildv(0x505050, 0x404040, true),
        down_hovering    : sb_buildv(0x404040, 0x606060, true),
        down_clicked_left: sb_buildv(0x404040, 0x505050, true),
        __init: func(self) { self.set_arrow_size(0.03) }
    }
}

// progress bars

gui.HProgressBar.__variants = {
    default: {
        __children: [ gui::ColorFiller({ color: 0xF0101010, clamp: true,
            init_clone: func(self, pb) {
                var bar = gui::Gradient({ color: 0xF0353535,
                    color2: 0xF0252525, clamp_v: true
                }, gui::Outline({ color: 0x404040, clamp: true }))
                var lbl = gui::Label({ text: pb.gen_label(), scale: 0.8 })
                pb.set_bar(bar)
                self.append(bar)
                self.append(lbl)
                connect(pb, "value,changed", func(o, v) {
                    lbl.set_text(pb.gen_label())
                })
            } }, gui::Outline({ color: 0x404040, clamp: true }))
        ]
    }
}

gui.VProgressBar.__variants = {
    default: {
        __children: [ gui::ColorFiller({ color: 0xF0101010, clamp: true,
            init_clone: func(self, pb) {
                var bar = gui::Gradient({ color: 0xF0353535,
                    color2: 0xF0252525, clamp_h: true, horizontal: true
                }, gui::Outline({ color: 0x404040, clamp: true }))
                var lbl = gui::Label({ text: pb.gen_label(), scale: 0.8 })
                pb.set_bar(bar)
                self.append(bar)
                self.append(lbl)
                connect(pb, "value,changed", func(o, v) {
                    lbl.set_text(pb.gen_label())
                })
            } }, gui::Outline({ color: 0x404040, clamp: true }))
        ]
    }
}

// Separators

gui.Line.__variants = {
    separator: {
        __init: func(self) { self.set_color(0x303030) }
    }
}

// Outlines

gui.Outline.__variants = {
    normal: {
        __init: func(self) { self.set_color(0x303030) }
    }
}

// windows

var window_build_titlebar = \-> gui::Gradient({
    color: 0xF0202020, color2: 0xF0101010, clamp_h: true
}, gui::Spacer({
    pad_h: 0.004, pad_v: 0.004,
    init_clone: func(self, win) {
        var lbl = gui::Label({ text: win.title || win.obj_name })
        self.append(lbl)
        connect(win, "title,changed", func(w, t) {
            lbl.set_text(t || w.obj_name) })
    }
}))

var window_build_regular = \mov -> gui::Filler({ clamp: true },
    gui::VBox({
        clamp: true,
        states: {
            default: gui::ColorFiller({ min_w: 0.05, min_h: 0.07 })
        }
    }, gui::Filler({ clamp_h: true },
        mov && gui::Mover({ clamp_h: true,
            init_clone: func(self, win) {
                self.set_window(win)
        } }, window_build_titlebar()) || window_build_titlebar(),
        gui::Spacer({ pad_h: 0.009, align_h: 1 },
            gui::Button({
                variant: false, states: {
                    default: gui::ColorFiller({
                        color: 0x101010, min_w: 0.015,
                        min_h: 0.015
                    }, gui::Outline({ clamp: true, color: 0x606060 })),
                    hovering: gui::ColorFiller({
                        color: 0x101010, min_w: 0.015,
                        min_h: 0.015
                    }, gui::Outline({ clamp: true, color: 0x808080 })),
                    clicked_left: gui::ColorFiller({
                        color: 0x101010, min_w: 0.015,
                        min_h: 0.015
                    }, gui::Outline({ clamp: true, color: 0x707070 }))
                },
                init_clone: func(self, win) {
                    connect(self, "clicked", \-> win.hide())
                }
            })
        )
    ), gui::ColorFiller({
        color: 0xF0101010, clamp: true
    }, gui::Spacer({
        pad_h: 0.005, pad_v: 0.005, init_clone: func(self, win) {
            win.set_container(self)
        }
    }))),
    gui::Outline({ color: 0x303030, clamp: true })
)

gui.Window.__variants = {
    borderless: {
        __children: [ gui::ColorFiller({
            color: 0xF0101010, clamp: true
        }, gui::Outline({ color: 0x303030, clamp: true
        }, gui::Spacer({
            pad_h: 0.005, pad_v: 0.005, init_clone: func(self, win) {
                win.set_container(self)
            }
        })))]
    },
    regular: { __properties: [ "title" ],
        __children: [ window_build_regular(false) ] },
    movable: { __properties: [ "title" ],
        __children: [ window_build_regular(true) ] }
}

// default windows

var progress_bar, progress_label
var progress_win = gui::Window({ __init: func(win) {
    win.append(gui::VBox(), func(b) {
        b.append(gui::Spacer({ pad_h: 0.01, pad_v: 0.01 }), func(sp) {
            progress_label = sp.append(gui::Label())
        })
        b.append(gui::Spacer({ pad_h: 0.02, pad_v: 0.01 }), func(sp) {
            progress_bar = sp.append(gui::HProgressBar({ min_w: 0.4,
                min_h: 0.03 }))
        })
    })
} })

from core.externals import set as set_ext

set_ext("progress_render", func(v, text) {
    progress_bar.set_value(v)
    progress_label.set_text(text)
    gui::__draw_window(progress_win)
})

var bg_win = func(mapname, mapinfo, mapshot, caption) {
    var win = gui::Window()
    win.set_input_grab(false)
    win.align(0, 1)
    win.append(gui::VBox(), func(b) {
        if mapname {
            b.append(gui::Label({ text: mapname, scale: 1.5 }))
        }
        if mapinfo { b.append(gui::Label({ text: mapinfo })) }
        if mapshot {
            b.append(gui::Spacer({ pad_h: 0.02, pad_v: 0.02 }), func(sp) {
                sp.append(gui::Image({ min_w: 0.2, min_h: 0.2 }),
                    func(img) { img.texture = mapshot })
            })
        }
        if caption {
            b.append(gui::Label({ text: caption, scale: 1.5 }))
        }
        b.append(gui::Filler({ min_h: 0.05 }))
    })
    return win
}

var hw_tex_size = 0
var max_tex_size = cs::var_get("maxtexsize")

connect(cs, "maxtexsize,changed", func(self, val) { max_tex_size = val })

var get_logo = func(root, win) {
    if  hw_tex_size == 0 {
        hw_tex_size = cs::var_get("hwtexsize")
    }
    var sz = ((max_tex_size != 0) && min(max_tex_size, hw_tex_size)
                                     || hw_tex_size)
    var w, h = root.get_pixel_w(), root.get_pixel_h()
    var logo
    if (sz >= 1024) && ((w > 1280) || (h > 800)) {
        logo = "<premul>media/interface/logo_1024"
    } else {
        logo = "<premul>media/interface/logo"
    }
    win.x, win.y, win.parent, win._root = 0, 0, root, root
    var proj = win.get_projection()
    proj.calc()
    var lw = min(proj.pw, proj.ph)
    return logo, lw, lw / 2
}

var bg_under = func(root) {
    var win = gui::Overlay()
    var logo, lw, lh = get_logo(root, win)
    win.append(gui::Image({ file: "media/interface/background",
        min_w: 1/0, min_h: 1/0 }))
    win.append(gui::Image({ file: "media/interface/shadow",
        min_w: 1/0, min_h: 1/0 }))
    win.append(gui::Image({ file: logo, min_w: lw, min_h: lh,
                            align_v: -1 }))
    return win
}

set_ext("background_render", func(caption, mapname, mapinfo, mapshot) {
    var root = gui::get_root()
    root.calc_text_scale()
    root.layout_dim()
    gui::__draw_window(bg_under(root))
    gui::__draw_window(bg_win(mapname, mapinfo, mapshot
        && ffi::cast("Texture*", mapshot) || undef, caption))
})

/** Variable: applydialog
    An engine variable that controls whether the "apply" dialog will show
    on changes that need restart of some engine subsystem. Defaults to 1.
*/
cs::var_new_checked("applydialog", cs.var_type.int, 0, 1, 1,
    cs.var_flags.PERSIST)
cs::var_new("hidechanges", cs.var_type.int, 0, 0, 1)

connect(changes, "add", func(self, ctype, desc) {
    if cs::var_get("applydialog") == 0 { return }
    changes::add(ctype, desc)
    if cs::var_get("hidechanges") == 0 {
        root.show_window("changes")
    }
})

connect(root, "reset", \-> cs::var_set("hidechanges", 0))

root.new_window("changes", gui.Window, func(win) {
    win.set_floating(true)
    win.set_variant("movable")
    win.set_title("Changes")
    win.append(gui::VBox(), func(b) {
        b.append(gui::Spacer({ pad_h: 0.01, pad_v: 0 },
            gui::Label({ text: "The following settings have changed:" })))
        b.append(gui::Spacer({ pad_v: 0.01, pad_h: 0.005, clamp_h: true },
            gui::Line({ clamp_h: true, color: 0x303030 })))
        for i, v in changes::get().each() {
            b.append(gui::Label({ text: v }))
        }
        b.append(gui::Filler({ clamp_h: true, min_h: 0.01 }))
        b.append(gui::Spacer({ pad_v: 0.005, pad_h: 0.005, clamp_h: true },
            gui::HBox({ padding: 0.01 },
                gui::Button({ label: "OK", min_w: 0.15,
                    signals: { clicked: func() {
                        changes::apply()
                        root.hide_window("changes")
                    } }
                }),
                gui::Button({ label: "Cancel", min_w: 0.15,
                    signals: { clicked: func() {
                        root.hide_window("changes")
                    } }
                })
            )
        ))
    })
})

root.new_window("texture", gui.Window, func(win) {
    win.set_floating(true)
    win.set_variant("movable")
    win.set_title("Textures")
    win.append(gui::HBox(), func(hb) {
        var s
        hb.append(gui::Outline(), func(o) {
            o.append(gui::Spacer({ pad_h: 0.005, pad_v: 0.005 }), func(sp) {
                sp.append(gui::Scroller({ clip_w: 0.9, clip_h: 0.6 }), func(sc) {
                    sc.append(gui::Grid({ columns: 8, padding: 0.01 }), func(gr) {
                        for i in 1 to capi::slot_texmru_num() {
                            var mru = capi::slot_texmru(i - 1)
                            gr.append(gui::Button({ variant: "vslot",
                                index: mru, min_w: 0.095, min_h: 0.095
                            }), func(b) {
                                connect(b, "clicked", \-> capi::slot_set(mru))
                            })
                        }
                    })
                    s = sc
                })
            })
        })
        hb.append(gui::VScrollbar({ clamp_v: true }), func(sb) {
            sb.append(gui::ScrollButton())
            sb.bind_scroller(s)
        })
    })
})

var fields = {
    (svars.StateBoolean): func(hb, nm, ent, dv) {
        var tvar = (dv == "true")
        var ret
        hb.append(gui::Filler({ min_w: 0.4 }), func(f) {
            f.append(gui::Toggle({ variant: "checkbox", condition: \-> tvar,
                align_h: -1
            }), func(t) {
                ret = t
                signal::connect(t, "released", func() {
                    tvar = !tvar
                    capi::makeundoent()
                    ent.set_gui_attr(nm, tostring(tvar))
                })
            })
        })
        return ret
    }
}
var field_def = func(hb, nm, ent, dv) {
    return hb.append(gui::Field({ clip_w: 0.4, value: dv }), func(ed) {
        connect(ed, "value,changed", func(ed, v) {
            capi::makeundoent()
            ent.set_gui_attr(nm, v)
        })
    })
}

root.new_window("entity", gui.Window, func(win) {
    win.set_floating(true)
    win.set_variant("movable")
    var  ent = capi::get_selected_entity()
    if !ent {
        ent = ents::get_player()
    }
    if !ent {
        win.set_title("Entity editing: none")
        win.append(gui::Spacer({ pad_h: 0.04, pad_v: 0.03 },
            gui::Label({ text: "No selected entity" })))
        return
    }
    win.set_title("Entity editing: %s (%d)".format(ent.name, ent.uid))
    var props = []
    var sdata = []
    var sdata_raw = ent.build_sdata()

    var prefix = "_SV_"
    for k, v in pairs(sdata_raw) {
        var sv = ent[prefix ~ k]
        var gn = sv.gui_name
        if gn != false {
            sdata[k] = [ gn || k, v, sv ]
            props.push(k)
        }
    }
    props.sort()

    win.append(gui::HBox(), func(hb) {
        var s
        hb.append(gui::Outline({ color: 0x303030 }), func(o) {
            o.append(gui::Spacer({ pad_h: 0.005, pad_v: 0.005 }), func(sp) {
                sp.append(gui::Scroller({ clip_w: 0.9, clip_h: 0.6 }), func(sc) {
                    sc.append(gui::VBox(), func(vb) {
                        var fpf, pf
                        for i, nm in props.each() {
                            var sd = sdata[nm]
                            var gn, dv, sv = sd[0], sd[1], sd[2]
                            vb.append(gui::HBox({ align_h: 1 }), func(hb) {
                                hb.append(gui::Label({ text: " " ~ sd[0]
                                    ~ ": " }))
                                var fld = fields[sv.__proto] || field_def
                                var fd = fld(hb, gn, ent, dv)
                                if pf { pf.set_tab_next(fd) }
                                pf = fd
                                if !fpf { fpf = fd }
                            })
                            if fpf && pf && pf != fpf {
                                pf.set_tab_next(fpf)
                            }
                        }
                    })
                    s = sc
                })
            })
        })
        hb.append(gui::VScrollbar({ clamp_v: true }), func(sb) {
            sb.append(gui::ScrollButton())
            sb.bind_scroller(s)
        })
    })
})

root.new_window("entity_new", gui.Window, func(win) {
    input::save_mouse_position()
    win.set_floating(true)
    win.set_variant("movable")
    win.set_title("New entity")

    var cnames = []
    for k, v in pairs(ents::get_all_prototypes()) {
        if v.is_a(ents.StaticEntity) {
            cnames.push(k)
        }
    }
    cnames.sort()

    win.append(gui::HBox(), func(hb) {
        var s
        hb.append(gui::Outline({ color: 0x303030 }), func(o) {
            o.append(gui::Spacer({ pad_h: 0.005, pad_v: 0.005 }), func(sp) {
                sp.append(gui::Scroller({ clip_w: 0.6, clip_h: 0.6 }), func(sc) {
                    sc.append(gui::VBox(), func(vb) {
                        for i, n in cnames.each() {
                            vb.append(gui::Button({
                                variant: "nobg", min_w: 0.3, label: n
                            }), func(btn) {
                                connect(btn, "clicked", func() {
                                    edit::new_entity(n)
                                    root.hide_window("entity_new")
                                })
                            })
                        }
                    })
                    s = sc
                })
            })
        })
        hb.append(gui::VScrollbar({ clamp_v: true }), func(sb) {
            sb.append(gui::ScrollButton())
            sb.bind_scroller(s)
        })
    })
})
