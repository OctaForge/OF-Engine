import capi
import core.events.signal
import core.gui.core as gui

var root = gui::get_root()

var Color = gui.Color
var connect = signal.connect

from std.math import floor

// buttons

var btnp  = [ "label", "min_w", "min_h" ]
var btnv  = { __properties: btnp }
var btnvb = { __properties: btnp }
gui.Button.__variants = { default: btnv, nobg: btnvb }

var btnv_init_clone = \ah -> func(self, btn) {
    var lbl = gui::Label({ text: btn.label, align_h: ah || 0 })
    self.append(lbl)
    connect(btn, "label,changed", func(b, t) { lbl.set_text(t) })
}

var btn_build_variant = \color, ic, dis, ah -> gui::Gradient({
    color: dis ? 0x50202020 : 0x202020, color2: dis ? 0x50101010 : 0x101010,
    clamp_h: true, init_clone: func(self, btn) {
        self.set_min_w(btn.min_w || 0)
        self.set_min_h(btn.min_h || 0)
        connect(btn, "min_w,changed", \b, v -> self.set_min_w(v))
        connect(btn, "min_h,changed", \b, v -> self.set_min_w(v))
    } }, gui::Outline({
        color: (dis ? (0x50 << 24) : 0) | color, clamp_h: true }, gui::Spacer({
            pad_h: 0.01, pad_v: 0.005, clamp_h: true,
            init_clone: ic || btnv_init_clone(ah)
        })))

var btn_build_variant_nobg = \dis, ah -> gui::Filler({
    clamp_h: true, init_clone: func(self, btn) {
        self.set_min_w(btn.min_w || 0)
        self.set_min_h(btn.min_h || 0)
        connect(btn, "min_w,changed", \b, v -> self.set_min_w(v))
        connect(btn, "min_h,changed", \b, v -> self.set_min_w(v))
    } }, gui::Spacer({
        pad_h: 0.01, pad_v: 0.005, clamp_h: true, init_clone: btnv_init_clone(ah)
    }))

btnv["default"     ] = btn_build_variant(0x303030)
btnv["hovering"    ] = btn_build_variant(0x505050)
btnv["clicked_left"] = btn_build_variant(0x404040)
btnv["disabled"    ] = btn_build_variant(0x303030, undef, true)

btnvb["default"     ] = btn_build_variant_nobg()
btnvb["hovering"    ] = btn_build_variant(0x404040)
btnvb["clicked_left"] = btn_build_variant(0x303030)
btnvb["disabled"    ] = btn_build_variant_nobg(true)

var mbtnv, vmbtnv, smbtnv, cbtnv =
    { __properties: btnp },
    { __properties: btnp },
    { __properties: btnp },
    { __properties: btnp }
gui.MenuButton.__variants = { default: mbtnv, visible: vmbtnv,
    submenu: smbtnv, combobox: cbtnv }

mbtnv["default"     ] = btn_build_variant_nobg()
mbtnv["hovering"    ] = btn_build_variant_nobg()
mbtnv["menu"        ] = btn_build_variant(0x404040)
mbtnv["clicked_left"] = btn_build_variant(0x404040)
mbtnv["disabled"    ] = btn_build_variant_nobg(true)

vmbtnv["default"     ] = btn_build_variant(0x303030)
vmbtnv["hovering"    ] = btn_build_variant(0x505050)
vmbtnv["menu"        ] = btn_build_variant(0x404040)
vmbtnv["clicked_left"] = btn_build_variant(0x404040)
vmbtnv["disabled"    ] = btn_build_variant(0x303030, undef, true)

smbtnv["default"     ] = btn_build_variant_nobg(false, -1)
smbtnv["hovering"    ] = btn_build_variant(0x404040, undef, false, -1)
smbtnv["menu"        ] = btn_build_variant(0x404040, undef, false, -1)
smbtnv["clicked_left"] = btn_build_variant(0x404040, undef, false, -1)
smbtnv["disabled"    ] = btn_build_variant_nobg(true, -1)

var cbox_init_clone = \col -> func(self, btn) {
    var lbl
    self.append(gui::HBox({ clamp_h: true }), func(bx) {
        lbl = bx.append(gui::Label({ text: btn.label }))
        bx.append(gui::Triangle({ style: gui.Triangle.OUTLINE,
            color: col, min_w: 0.015, min_h: 0.015, angle: 180
        }, gui::Triangle({ color: col, min_w: 0.015, min_h: 0.015,
            angle: 180 })))
    })
    connect(btn, "label,changed", func(b, t) { lbl.set_text(t) })
}

cbtnv["default"     ] = btn_build_variant(0x303030, cbox_init_clone(0x404040))
cbtnv["hovering"    ] = btn_build_variant(0x505050, cbox_init_clone(0x606060))
cbtnv["menu"        ] = btn_build_variant(0x404040, cbox_init_clone(0x404040))
cbtnv["clicked_left"] = btn_build_variant(0x404040, cbox_init_clone(0x404040))
cbtnv["disabled"    ] = btn_build_variant(0x303030, cbox_init_clone(0x50404040), true)

// (v)slot viewer buttons

var slotbtn_init_clone = func(self, btn) {
    self.set_min_w(btn.min_w || 0)
    self.set_min_h(btn.min_h || 0)
    self.set_index(btn.index || 0)
    connect(btn, "min_w,changed", \b, v -> self.set_min_w(v))
    connect(btn, "min_h,changed", \b, v -> self.set_min_h(v))
    connect(btn, "index,changed", \b, v -> self.set_index(v))
}

gui.Button.__variants.vslot = {
    __properties: [ "index", "min_w", "min_h" ],
    default: gui::VSlotViewer({ init_clone: slotbtn_init_clone }),
    hovering: gui::VSlotViewer({ init_clone: slotbtn_init_clone },
        gui::Outline({ clamp: true, color: 0x606060 })),
    clicked_left: gui::VSlotViewer({ init_clone: slotbtn_init_clone },
        gui::Outline({ clamp: true, color: 0x505050 }))
}

gui.Button.__variants.slot = {
    __properties: [ "index", "min_w", "min_h" ],
    default: gui::SlotViewer({ init_clone: slotbtn_init_clone }),
    hovering: gui::SlotViewer({ init_clone: slotbtn_init_clone },
        gui::Outline({ clamp: true, color: 0x606060 })),
    clicked_left: gui::SlotViewer({ init_clone: slotbtn_init_clone },
        gui::Outline({ clamp: true, color: 0x505050 }))
}

// editors

var dis_ed_cb = func(self, r, g, b, a) { return r, g, b, floor((a * 0x50) / 0xFF) }
gui.TextEditor.__variants = {
    default: {
        default: gui::ColorFiller({
            color: 0x80202020, clamp: true
        }, gui::Outline({ clamp: true, color: 0x303030 })),
        disabled: gui::ColorFiller({
            color: 0x40202020, clamp: true
        }, gui::Outline({ clamp: true, color: 0x50303030 })),
        __init: func(ed) {
            ed.set_pad_l(0.005)
            ed.set_pad_r(0.005)
            ed.disabled_color_cb = dis_ed_cb
        }
    }
}
gui.Field.__variants    = gui.TextEditor.__variants
gui.KeyField.__variants = gui.TextEditor.__variants

// menus, tooltips

gui.Filler.__variants = {
    menu: {
        __children: [ gui::ColorFiller({ color: 0xF0101010, clamp: true },
            gui::Outline({ color: 0x303030, clamp: true })) ]
    },
    edithud: {
        __children: [ gui::Gradient({ color: 0xF0303030, color2: 0xF0101010,
            clamp: true,
        }, gui::Outline({ color: 0x404040, clamp: true })) ]
    },
    tooltip: {
        __properties: [ "label" ],
        __children: [ gui::Gradient({
            color: 0xF0202020, color2: 0xF0101010
        }, gui::Outline({
            color: 0x303030, clamp: true
        }, gui::Spacer({
            pad_h: 0.01, pad_v: 0.005, init_clone: func(self, ttip) {
                var lbl = gui::Label({ text: ttip.label })
                self.append(lbl)
                connect(ttip, "label,changed", func(o, t) {
                    lbl.set_text(t) })
            }
        }))) ]
    }
}

// checkboxes, radioboxes

var ckbox_build_variant = \color, tgl, dis -> gui::ColorFiller({
    color: dis ? 0x50202020 : 0x202020, min_w: 0.02, min_h: 0.02
}, gui::Outline({
    color: (dis ? (0x50 << 24) : 0) | color, clamp: true
}, tgl && gui::Spacer({
    pad_h: 0.005, pad_v: 0.005, clamp: true
}, gui::ColorFiller({
    clamp: true, color: dis ? 0x50C0C0C0 : 0xC0C0C0
}, gui::Outline({ color: color, clamp: true }))) || undef))

var rdbtn_build_variant = \color, tgl, dis -> gui::Circle({
    color: dis ? 0x50202020 : 0x202020, min_w: 0.02, min_h: 0.02
}, gui::Circle({
    style: gui.Circle.OUTLINE, color: (dis ? (0x50 << 24) : 0) | color,
    clamp: true,
}, tgl && gui::Spacer({
    pad_h: 0.005, pad_v: 0.005, clamp: true
}, gui::Circle({
    clamp: true, color: dis ? 0x50C0C0C0 : 0xC0C0C0
}, gui::Circle({
    style: gui.Circle.OUTLINE, color: color,
    clamp: true
}))) || undef))

var ckboxv, rdbtnv = {}, {}

gui.Toggle.__variants = {
    checkbox: ckboxv,
    radiobutton: rdbtnv
}

ckboxv["default"         ] = ckbox_build_variant(0x303030)
ckboxv["default_hovering"] = ckbox_build_variant(0x505050)
ckboxv["default_focused" ] = ckbox_build_variant(0x606060)
ckboxv["default_disabled"] = ckbox_build_variant(0x303030, false, true)
ckboxv["toggled"         ] = ckbox_build_variant(0x404040, true)
ckboxv["toggled_hovering"] = ckbox_build_variant(0x505050, true)
ckboxv["toggled_focused" ] = ckbox_build_variant(0x606060, true)
ckboxv["toggled_disabled"] = ckbox_build_variant(0x404040, true, true)
rdbtnv["default"         ] = rdbtn_build_variant(0x303030)
rdbtnv["default_hovering"] = rdbtn_build_variant(0x505050)
rdbtnv["default_focused" ] = rdbtn_build_variant(0x606060)
rdbtnv["default_disabled"] = rdbtn_build_variant(0x303030, false, true)
rdbtnv["toggled"         ] = rdbtn_build_variant(0x404040, true)
rdbtnv["toggled_hovering"] = rdbtn_build_variant(0x505050, true)
rdbtnv["toggled_focused" ] = rdbtn_build_variant(0x606060, true)
rdbtnv["toggled_disabled"] = rdbtn_build_variant(0x404040, true, true)

// scrollbars

var sb_buildh = \lac, rac, sl -> gui::Outline({
    clamp_h: true, color: 0x303030
},
gui::Filler({ min_w: sl ? 0.03 : 0.02, min_h: sl ? 0.03 : 0.02, align_h: -1 },
    gui::Triangle({ style: gui.Triangle.OUTLINE,
        color: lac, min_w: sl ? 0.015 : 0.01, min_h: sl ? 0.015 : 0.01, angle: 90
    }, sl ? gui::Triangle({ color: lac, min_w: 0.015, min_h: 0.015, angle: 90 }) : undef)),
gui::Filler({ min_w: sl ? 0.03 : 0.02, min_h: sl ? 0.03 : 0.02, align_h: 1 },
    gui::Triangle({ style: gui.Triangle.OUTLINE,
        color: rac, min_w: sl ? 0.015 : 0.01, min_h: sl ? 0.015 : 0.01, angle: -90
    }, sl ? gui::Triangle({ color: rac, min_w: 0.015, min_h: 0.015, angle: -90 }) : undef)
))

var sb_buildv = \lac, rac, sl -> gui::Filler({
    clamp_v: true
}, gui::Filler({ min_w: sl ? 0.03 : 0.02, min_h: sl ? 0.03 : 0.02, align_v: -1 },
    gui::Triangle({ style: gui.Triangle.OUTLINE,
        color: lac, min_w: sl ? 0.015 : 0.01, min_h: sl ? 0.015 : 0.01
    }, sl ? gui::Triangle({ color: lac, min_w: 0.015, min_h: 0.015 }) : undef)),
gui::Filler({ min_w: sl ? 0.03 : 0.02, min_h: sl ? 0.03 : 0.02, align_v: 1 },
    gui::Triangle({ style: gui.Triangle.OUTLINE,
        color: rac, min_w: sl ? 0.015 : 0.01, min_h: sl ? 0.015 : 0.01, angle: 180
    }, sl ? gui::Triangle({ color: rac, min_w: 0.015, min_h: 0.015, angle: 180 }) : undef)
))

gui.ScrollButton.__variants = {
    default: {
        default: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.015, min_h: 0.015 },
            gui::Outline({ clamp: true, color: 0x404040 })),
        hovering: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.015, min_h: 0.015 },
            gui::Outline({ clamp: true, color: 0x606060 })),
        clicked_left: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.015, min_h: 0.015 },
            gui::Outline({ clamp: true, color: 0x505050 }))
    }
}

gui.HScrollbar.__variants = {
    default: {
        default           : sb_buildh(0x404040, 0x404040),
        left_hovering     : sb_buildh(0x606060, 0x404040),
        left_clicked_left : sb_buildh(0x505050, 0x404040),
        right_hovering    : sb_buildh(0x404040, 0x606060),
        right_clicked_left: sb_buildh(0x404040, 0x505050),
        __init: func(self) { self.set_arrow_size(0.02) }
    }
}

gui.VScrollbar.__variants = {
    default: {
        default          : sb_buildv(0x404040, 0x404040),
        up_hovering      : sb_buildv(0x606060, 0x404040),
        up_clicked_left  : sb_buildv(0x505050, 0x404040),
        down_hovering    : sb_buildv(0x404040, 0x606060),
        down_clicked_left: sb_buildv(0x404040, 0x505050),
        __init: func(self) { self.set_arrow_size(0.02) }
    }
}

// sliders

gui.SliderButton.__variants = {
    default: {
        default: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.03, min_h: 0.03 },
            gui::Outline({ clamp: true, color: 0x404040 })),
        hovering: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.03, min_h: 0.03 },
            gui::Outline({ clamp: true, color: 0x606060 })),
        clicked_left: gui::ColorFiller({
            color: 0x181818, clamp: true, min_w: 0.03, min_h: 0.03 },
            gui::Outline({ clamp: true, color: 0x505050 }))
    }
}

gui.HSlider.__variants = {
    default: {
        default           : sb_buildh(0x404040, 0x404040, true),
        left_hovering     : sb_buildh(0x606060, 0x404040, true),
        left_clicked_left : sb_buildh(0x505050, 0x404040, true),
        right_hovering    : sb_buildh(0x404040, 0x606060, true),
        right_clicked_left: sb_buildh(0x404040, 0x505050, true),
        __init: func(self) { self.set_arrow_size(0.03) }
    }
}

gui.VSlider.__variants = {
    default: {
        default          : sb_buildv(0x404040, 0x404040, true),
        up_hovering      : sb_buildv(0x606060, 0x404040, true),
        up_clicked_left  : sb_buildv(0x505050, 0x404040, true),
        down_hovering    : sb_buildv(0x404040, 0x606060, true),
        down_clicked_left: sb_buildv(0x404040, 0x505050, true),
        __init: func(self) { self.set_arrow_size(0.03) }
    }
}

// progress bars

gui.HProgressBar.__variants = {
    default: {
        __children: [ gui::ColorFiller({ color: 0xF0101010, clamp: true,
            init_clone: func(self, pb) {
                var bar = gui::Gradient({ color: 0xF0353535,
                    color2: 0xF0252525, clamp_v: true
                }, gui::Outline({ color: 0x404040, clamp: true }))
                var lbl = gui::Label({ text: pb.gen_label(), scale: 0.8 })
                pb.set_bar(bar)
                self.append(bar)
                self.append(lbl)
                connect(pb, "value,changed", func(o, v) {
                    lbl.set_text(pb.gen_label())
                })
            } }, gui::Outline({ color: 0x404040, clamp: true }))
        ]
    }
}

gui.VProgressBar.__variants = {
    default: {
        __children: [ gui::ColorFiller({ color: 0xF0101010, clamp: true,
            init_clone: func(self, pb) {
                var bar = gui::Gradient({ color: 0xF0353535,
                    color2: 0xF0252525, clamp_h: true, horizontal: true
                }, gui::Outline({ color: 0x404040, clamp: true }))
                var lbl = gui::Label({ text: pb.gen_label(), scale: 0.8 })
                pb.set_bar(bar)
                self.append(bar)
                self.append(lbl)
                connect(pb, "value,changed", func(o, v) {
                    lbl.set_text(pb.gen_label())
                })
            } }, gui::Outline({ color: 0x404040, clamp: true }))
        ]
    }
}

// Separators

gui.Line.__variants = {
    separator: {
        __init: func(self) { self.set_color(0x303030) }
    }
}

// Outlines

gui.Outline.__variants = {
    normal: {
        __init: func(self) { self.set_color(0x303030) }
    }
}

// Labels

var dis_lbl_cb = func(self, r, g, b, a) { return r, g, b, floor((a * 0x50) / 0xFF) }
gui.Label.__variants = {
    default: {
        __init: func(self) { self.disabled_color_cb = dis_lbl_cb }
    }
}
gui.EvalLabel.__variants = gui.Label.__variants

// windows

var window_build_titlebar = \-> gui::Gradient({
    color: 0xF0202020, color2: 0xF0101010, clamp_h: true
}, gui::Spacer({
    pad_h: 0.004, pad_v: 0.004,
    init_clone: func(self, win) {
        var lbl = gui::Label({ text: win.title || win.obj_name })
        self.append(lbl)
        connect(win, "title,changed", func(w, t) {
            lbl.set_text(t || w.obj_name) })
    }
}))

var window_build_regular = \mov -> gui::Filler({ clamp: true },
    gui::VBox({
        clamp: true,
        states: {
            default: gui::ColorFiller({ min_w: 0.05, min_h: 0.07 })
        }
    }, gui::Filler({ clamp_h: true },
        mov && gui::Mover({ clamp_h: true,
            init_clone: func(self, win) {
                self.set_window(win)
        } }, window_build_titlebar()) || window_build_titlebar(),
        gui::Spacer({ pad_h: 0.009, align_h: 1 },
            gui::Button({
                variant: false, states: {
                    default: gui::ColorFiller({
                        color: 0x101010, min_w: 0.015,
                        min_h: 0.015
                    }, gui::Outline({ clamp: true, color: 0x606060 })),
                    hovering: gui::ColorFiller({
                        color: 0x101010, min_w: 0.015,
                        min_h: 0.015
                    }, gui::Outline({ clamp: true, color: 0x808080 })),
                    clicked_left: gui::ColorFiller({
                        color: 0x101010, min_w: 0.015,
                        min_h: 0.015
                    }, gui::Outline({ clamp: true, color: 0x707070 }))
                },
                init_clone: func(self, win) {
                    connect(self, "clicked", \-> win.hide())
                }
            })
        )
    ), gui::ColorFiller({
        color: 0xF0101010, clamp: true
    }, gui::Spacer({
        pad_h: 0.005, pad_v: 0.005, init_clone: func(self, win) {
            win.set_container(self)
        }
    }))),
    gui::Outline({ color: 0x303030, clamp: true })
)

gui.Window.__variants = {
    borderless: {
        __children: [ gui::ColorFiller({
            color: 0xF0101010, clamp: true
        }, gui::Outline({ color: 0x303030, clamp: true
        }, gui::Spacer({
            pad_h: 0.005, pad_v: 0.005, init_clone: func(self, win) {
                win.set_container(self)
            }
        })))]
    },
    regular: { __properties: [ "title" ],
        __children: [ window_build_regular(false) ] },
    movable: { __properties: [ "title" ],
        __children: [ window_build_regular(true) ] }
}
