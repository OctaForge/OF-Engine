/**<
    Misc widgets.

    Author:
        q66 <quaker66@gmail.com>

    License:
        See COPYING.txt.
*/

import capi
import core.events.signal

var emit = signal.emit

from std.math import min, max, abs, sin, pi

var get_curtime = capi.get_curtime

/// Module: core
import core.gui.core as M

// widget types
var register_type = M.register_type

// base widgets
var Widget = M::get_type("Widget")

// setters
var gen_setter = M.gen_setter

// adjustment
var adjust = M.adjust

// keys
var key = M.key

var ALIGN_MASK = adjust.ALIGN_MASK

/**
    Represents a state as a first class object. Has an arbitrary number of
    states.

    Properties:
        - state - the current state of the widget, can be either a string or
          a callable value that returns the state when called with self as
          an argument.
*/
M.State = register_type("State", Widget, {
    __ctor: func(self, kwargs, ...) {
        kwargs = kwargs || {}
        self.state = kwargs.state
        return Widget::__ctor(self, kwargs, ...)
    },

    choose_state: func(self) {
        var  state = self.state
        if !state { return }
        return (typeof state == "string") && state || state(self)
    },

    /// Function: set_state
    set_state: gen_setter("state")
})

/**
    A widget using which you can move windows. The window must have the
    floating property set to true or it won't move. It doesn't have any
    appearance or states, those are defined by its children.

    If you have multiple movable windows, the mover will take care of
    moving the current window to the top. That means you don't have to care
    about re-stacking them.

    Properties:
        - window - a reference to the window this belongs to.
*/
M.Mover = register_type("Mover", Widget, {
    __ctor: func(self, kwargs, ...) {
        kwargs = kwargs || {}
        self.window = kwargs.window
        return Widget::__ctor(self, kwargs, ...)
    },

    click: func(self, cx, cy, code) {
        var o = Widget::click(self, cx, cy, code)
        if o || code != key.MOUSELEFT {
            return o
        }
        var  w = self.window
        if !w { return self.target(cx, cy) && self }
        var c = w.parent.children
        var n  =  c.find(w)
        if  n != (c.len() - 1) { c.push(c.remove(n)) }
        return self.target(cx, cy) && self
    },

    can_move: func(self, cx, cy) {
        var win = self.window
        var wp = win.parent

        // no parent means root; we don't need checking for non-mdi windows
        if !wp.parent { return true }

        var rx, ry, p = self.x, self.y, wp
        while true {
            rx, ry = rx + p.x, ry + p.y
            var  pp = p.parent
            if !pp { break }
            p    = pp
        }

        if cx < rx || cy < ry || cx > (rx + wp.w) || cy > (ry + wp.h) {
            // avoid bugs; stop moving when cursor is outside
            self.clear_focus()
            return false
        }

        return true
    },

    clicked: func(self, cx, cy, code) {
        if code == key.MOUSELEFT {
            self.ox, self.oy = cx, cy
        }
    },

    holding: func(self, cx, cy, code) {
        var w = self.window
        if w && w.floating && code == key.MOUSELEFT && self.can_move() {
            // dealign so that adjust_layout doesn't fuck with x/y
            w.adjust &= ~ALIGN_MASK
            w.x += cx - self.ox
            w.y += cy - self.oy
        }
        Widget::holding(self, cx, cy, code)
    },

    /// Function: set_window
    set_window: gen_setter("window")
})

var Filler = M.Filler

/**
    A base widget type for progress bars. Not useful alone. For working
    variants, see $HProgressBar and $VProgressBar.

    Properties:
        - value - the current value, from 0.0 to 1.0. If set out of bounds,
          it will get clamped to nearest valid value (0.0 or 1.0).
        - bar - a widget representing the actual "bar" of the progress bar
          (aka the child that will take value * width or value * height of
          the progress bar).
        - label - either a format string or a callable value. When a format
          string, it represents the format of the label on the progress bar
          (by default it's `%d%%`, which will result in e.g. `75%`, the value
          is multiplied by 100 before formatting), when it's a callable value
          it'll be called with `self` and the value (not multiplied) as
          arguments, expecting the label string as a return value.
*/
M.ProgressBar = register_type("ProgressBar", Filler, {
    __ctor: func(self, kwargs, ...) {
        kwargs = kwargs || {}
        self.value = kwargs.value || 0
        self.bar = kwargs.bar
        self.label = kwargs.label || "%d%%"
        return Filler::__ctor(self, kwargs, ...)
    },

    /**
        Generates a label for the progress bar and returns it. See the `label`
        attribute for semantics.
    */
    gen_label: func(self) {
        var lbl = self.label
        if typeof lbl == "string" { return lbl.format(self.value * 100) }
        return lbl(self, self.value)
    },

    /// Function: set_value
    set_value: gen_setter("value"),
    /// Function: set_bar
    set_bar: gen_setter("bar"),
    /// Function: set_label
    set_label: gen_setter("label")
})

/// A horizontal working variant of $ProgressBar.
M.HProgressBar = register_type("HProgressBar", M.ProgressBar, {
    adjust_children: func(self) {
        var bar = self.bar
        if !bar { return Widget::adjust_children(self) }
        bar.x = 0
        bar.w = max(min(self.w, self.w * self.value), 0)
        bar.adjust &= ~adjust.ALIGN_HMASK
        Widget::adjust_children(self)
    }
})

/// A vertical working variant of $ProgressBar.
M.VProgressBar = register_type("VProgressBar", M.ProgressBar, {
    adjust_children: func(self) {
        var bar = self.bar
        if !bar { return Widget::adjust_children(self) }
        bar.y = 0
        bar.h = max(min(self.h, self.h * self.value), 0)
        bar.adjust &= ~adjust.ALIGN_VMASK
        Widget::adjust_children(self)
    }
})

var move_funcs = {
    "linear,x" : func(p) { return 1, 0 },
    "linear,y" : func(p) { return 0, 1 },
    "linear,xy": func(p) { return 1, 1 },

    "speedup,x" : func(p) { return p, 0 },
    "speedup,y" : func(p) { return 0, p },
    "speedup,xy": func(p) { return p, p },

    "slowdown,x" : func(p) { return 1 - p,     0 },
    "slowdown,y" : func(p) { return 0,     1 - p },
    "slowdown,xy": func(p) { return 1 - p, 1 - p },

    "sinusoidal,x" : func(p) { return sin(p * pi),           0 },
    "sinusoidal,y" : func(p) { return 0,           sin(p * pi) },
    "sinusoidal,xy": func(p) { return sin(p * pi), sin(p * pi) }
}

M.Animator = register_type("Animator", Widget, {
    __ctor: func(self, kwargs, ...) {
        self.move_func    = kwargs.move_func
        self.move_time    = kwargs.move_time   || 2000
        self.move_dist_x  = kwargs.move_dist_x || undef
        self.move_dist_y  = kwargs.move_dist_y || undef
        self.move_speed   = kwargs.move_speed  || 0.2
        self.reset()
        return Widget::__ctor(self, kwargs, ...)
    },

    reset: func(self) {
        self.move_elapsed = 0
        self.move_moved_x = 0
        self.move_moved_y = 0
    },

    get_progress: func(self) {
        var elapsed, rtime = self.move_elapsed, self.move_time
        var distx = self.move_dist_x
        var disty = self.move_dist_y

        if distx || disty {
            var progx, progy = 1, 1
            if distx && distx != 0 {
                progx = self.move_moved_x / distx
            }
            if disty && disty != 0 {
                progy = self.move_moved_y / disty
            }
            return min(progx, progy)
        }

        return elapsed / rtime
    },

    animate: func(self, o, millis) {
        var mf = self.move_func
        if typeof mf == "string" { mf = move_funcs[mf] }

        var dx, dy = mf(self.move_elapsed / self.move_time)
        dx = dx * self.move_speed * (millis / 1000)
        dy = dy * self.move_speed * (millis / 1000)
        o.x = o.x + dx
        o.y = o.y + dy
        self.move_moved_x = self.move_moved_x + abs(dx)
        self.move_moved_y = self.move_moved_y + abs(dy)
    },

    layout: func(self) {
        if !self.started { return Widget::layout(self) }

        var prog = self.get_progress()
        if prog >= 1.0 {
            self.started = false
            emit(self, "anim,end")
            return Widget::layout(self)
        }

        var millis = get_curtime()
        self.move_elapsed += millis

        M::loop_children(self, func(o) {
            o.layout()
            self.animate(o, millis)
            self.w = max(self.w, o.x + o.w)
            self.h = max(self.h, o.y + o.h)
        })
    },

    start: func(self) {
        self.started = true
        self.reset()
        emit(self, "anim,start")
    },

    stop: func(self) {
        self.started = false
        emit(self, "anim,stop")
    }
})
