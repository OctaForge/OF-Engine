/**<
    Slider widgets.

    Author:
        q66 <quaker66@gmail.com>

    License:
        See COPYING.txt.
*/

import capi
import core.events.signal
import core.engine.cubescript as cs

var get_millis in capi

from std.math import min, max, abs, clamp, round
from std.conv import tonumber

var emit = signal.emit

/// Module: core
import core.gui.core as M

// consts
var key = M.key

// widget types
var register_type = M.register_type

// base widgets
var Widget = M::get_type("Widget")

// setters
var gen_setter = M.gen_setter

// orientation
var orient = M.orient

// alignment/clamping
var adjust = M.adjust

var SliderButton

/**
    Implements a base type for either horizontal or vertical slider.

    Changes of "value" performed internally emit the "value,changed" signal
    with the new value as an argument.

    Properties:
        - min_valie, max_value, value - the minimum, maximum and current
          values of the slider.
        - arrow_size - sliders can arrow-scroll like scrollbars.
        - step_size - the size of one slider step, defaults to 1.
        - step_time - the time to perform a step during arrow scroll,
          defaults to 100.
*/
M.Slider = register_type("Slider", Widget, {
    __ctor: func(self, kwargs, ...) {
        kwargs = kwargs || {}
        self.min_value = kwargs.min_value || 0
        self.max_value = kwargs.max_value || 0
        self.value     = kwargs.value     || 0

        self.arrow_size = kwargs.arrow_size || 0
        self.step_size  = kwargs.step_size  || 1
        self.step_time  = kwargs.step_time  || 100

        self.last_step = 0
        self.arrow_dir = 0

        if kwargs.variable {
            self.setup_from_var(kwargs.variable)
        } else if kwargs.list {
            self.setup_from_list(kwargs.list)
        }

        return Widget::__ctor(self, kwargs, ...)
    },

    /// Jumps by n steps on the slider.
    do_step: func(self, n) {
        var mn, mx, ss = self.min_value, self.max_value, self.step_size

        var maxstep = abs(mx - mn) / ss
        var curstep = (self.value - min(mn, mx)) / ss
        var newstep = clamp(curstep + n, 0, maxstep)

        var val = min(mx, mn) + newstep * ss
        self.value = val
        emit(self, "value,changed", val)
    },

    /// Sets the nth step.
    set_step: func(self, n) {
        var mn, mx, ss = self.min_value, self.max_value, self.step_size

        var steps   = abs(mx - mn) / ss
        var newstep = clamp(n, 0, steps)

        var val = min(mx, mn) + newstep * ss
        self.value = val
        emit(self, "value,changed", val)
    },

    /**
        You can change the slider value using the up, left keys (goes back
        by one step), down, right keys (goes forward by one step) and mouse
        scroll (goes forward/back by 3 steps).
    */
    key_hover: func(self, code, isdown) {
        if code == key.UP || code == key.LEFT {
            if isdown { self.do_step(-1) }
            return true
        } else if code == key.MOUSEWHEELUP {
            if isdown { self.do_step(-3) }
            return true
        } else if code == key.DOWN || code == key.RIGHT {
            if isdown { self.do_step(1) }
            return true
        } else if code == key.MOUSEWHEELDOWN {
            if isdown { self.do_step(3) }
            return true
        }
        return Widget::key_hover(self, code, isdown)
    },

    choose_direction: func(self, cx, cy) {
        return 0
    },

    /**
        The slider can be hovered on unless some of its children want the
        hover instead.
    */
    hover: func(self, cx, cy) {
        return Widget::hover(self, cx, cy) || (self.target(cx, cy) && self)
    },

    /**
        The slider can be clicked on unless some of its children want the
        click instead.
    */
    click: func(self, cx, cy, code) {
        return Widget::click(self, cx, cy, code) || (self.target(cx, cy) && self)
    },

    scroll_to: func(self, cx, cy) { },

    /**
        Clicking inside the slider area but outside the arrow area jumps
        in the slider.
    */
    clicked: func(self, cx, cy, code) {
        if code == key.MOUSELEFT {
            var d = self::choose_direction(self, cx, cy)
            self.arrow_dir = d
            if d == 0 {
                self.scroll_to(cx, cy)
            }
        }
        return Widget::clicked(self, cx, cy, code)
    },

    arrow_scroll: func(self, d) {
        var tmillis = get_millis(true)
        if (self.last_step + self.step_time) > tmillis { return }

        self.last_step = tmillis
        self::do_step(self, d)
    },

    holding: func(self, cx, cy, code) {
        if code == key.MOUSELEFT {
            var d = self.choose_direction(cx, cy)
            self.arrow_dir = d
            if d != 0 { self.arrow_scroll(d) }
        }
        Widget::holding(self, cx, cy, code)
    },

    hovering: func(self, cx, cy) {
        if !self.is_clicked(key.MOUSELEFT) {
            self.arrow_dir = self.choose_direction(cx, cy)
        }
        Widget::hovering(self, cx, cy)
    },

    move_button: func(self, o, fromx, fromy, tox, toy) { },

    /// Set up a slider from a Cubescript variable of the given name.
    setup_from_var: func(self, varn) {
        var minv, maxv, curv = tonumber(cs::var_get_min(varn)),
                               tonumber(cs::var_get_max(varn)),
                               tonumber(cs::var_get(varn))
        if !minv || !maxv || !curv { return false }
        self.set_min_value(minv)
        self.set_max_value(maxv)
        self.set_value(curv)
        var fromhere = false
        var cid = signal::connect(cs, varn ~ ",changed", func(cs, v) {
            if !fromhere { self.set_value(tonumber(v)) }
            fromhere = false
        })
        signal::connect(self, "destroy", func() {
            signal::disconnect(cs, varn ~ ",changed", cid)
        })
        signal::connect(self, "value,changed", func(self, v) {
            fromhere = true
            cs::var_set(varn, v)
        })
        return true
    },

    /// Set up a slider from an array
    setup_from_list: func(self, list, current_idx, use_val) {
        // build a reverse mapping (used later anyway)
        var rm = {}
        for i, v in list.each() {
            rm[v] = i
        }
        var minv, maxv, curv = 0, list.len() - 1, use_val ? rm[current_idx] :
            current_idx
        if !curv || !list[curv] { return false }
        self.set_min_value(minv)
        self.set_max_value(maxv)
        self.set_value(curv)
        self.__list = list
        self.__rmap = rm
        return true
    },

    /// Function: get_list_min_value
    get_list_min_value: func(self) {
        if !self.__list { return undef }
        return self.__list[self.min_value]
    },

    /// Function: get_list_max_value
    get_list_max_value: func(self) {
        if !self.__list { return undef }
        return self.__list[self.max_value]
    },

    /// Function: get_list_value
    get_list_value: func(self) {
        if !self.__list { return undef }
        return self.__list[self.value]
    },

    /// Function: set_list_min_value
    set_list_min_value: func(self, val) {
        if !self.__rmap { return }
        var idx = self.__rmap[val]
        if !idx { return }
        self.min_value = idx
        emit(self, "list_min_value,changed", val, idx)
    },

    /// Function: set_list_max_value
    set_list_max_value: func(self, val) {
        if !self.__rmap { return }
        var idx = self.__rmap[val]
        if !idx { return }
        self.max_value = idx
        emit(self, "list_max_value,changed", val, idx)
    },

    /// Function: set_list_value
    set_list_value: func(self, val) {
        if !self.__rmap { return }
        var idx = self.__rmap[val]
        if !idx { return }
        self.value = idx
        emit(self, "list_value,changed", val, idx)
    },

    /// Function: set_min_value
    set_min_value: gen_setter("min_value"),

    /// Function: set_max_value
    set_max_value: gen_setter("max_value"),

    /// Function: set_value
    set_value: gen_setter("value"),

    /// Function: set_step_size
    set_step_size: gen_setter("step_size"),

    /// Function: set_step_time
    set_step_time: gen_setter("step_time"),

    /// Function: set_arrow_size
    set_arrow_size: gen_setter("arrow_size")
})
var Slider = M.Slider

var clicked_states = {
    (key.MOUSELEFT   ): "clicked_left",
    (key.MOUSEMIDDLE ): "clicked_middle",
    (key.MOUSERIGHT  ): "clicked_right",
    (key.MOUSEBACK   ): "clicked_back",
    (key.MOUSEFORWARD): "clicked_forward"
}

/**
    A slider button you can put inside a slider and drag. The slider
    will adjust the button width (in case of horizontal slider) and height
    (in case of vertical slider) depending on the slider size and values.

    A slider button has seven states, "default", "hovering", "clicked_left",
    "clicked_right", "clicked_middle", "clicked_back" and "clicked_forward".
*/
M.SliderButton = register_type("SliderButton", Widget, {
    __ctor: func(self, kwargs, ...) {
        self.offset_h = 0
        self.offset_v = 0

        return Widget::__ctor(self, kwargs, ...)
    },

    choose_state: func(self) {
        return clicked_states[self.is_clicked()] ||
            (self.is_hovering() && "hovering" || "default")
    },

    hover: func(self, cx, cy) {
        return self.target(cx, cy) && self
    },

    click: func(self, cx, cy) {
        return self.target(cx, cy) && self
    },

    holding: func(self, cx, cy, code) {
        var p = self.parent
        if p && code == key.MOUSELEFT && p.type == Slider.type {
            p.arrow_dir = 0
            p.move_button(self, self.offset_h, self.offset_v, cx, cy)
        }
        Widget::holding(self, cx, cy, code)
    },

    clicked: func(self, cx, cy, code) {
        if code == key.MOUSELEFT {
            self.offset_h = cx
            self.offset_v = cy
        }
        return Widget::clicked(self, cx, cy, code)
    },

    layout: func(self) {
        var lastw = self.w
        var lasth = self.h

        Widget::layout(self)

        if self.is_clicked(key.MOUSELEFT) {
            self.w = lastw
            self.h = lasth
        }
    }
})
SliderButton = M.SliderButton

/**
    A specialization of $Slider. Has the "orient" member set to
    the HORIZONTAL field of $orient. Overloads some of the Slider
    methods specifically for horizontal direction.

    Has thirteen states - "default", "(left|right)_hovering",
    "(left|right)_clicked_(left|right|middle|back|forward)".
*/
M.HSlider = register_type("HSlider", Slider, {
    orient: orient.HORIZONTAL,

    choose_state: func(self) {
        var ad = self.arrow_dir

        if ad == -1 {
            var clicked = clicked_states[self.is_clicked()]
            return clicked && "left_" ~ clicked ||
                (self.is_hovering() && "left_hovering" || "default")
        } else if ad == 1 {
            var clicked = clicked_states[self.is_clicked()]
            return clicked && "right_" ~ clicked ||
                (self.is_hovering() && "right_hovering" || "default")
        }
        return "default"
    },

    choose_direction: func(self, cx, cy) {
        var asz = self.arrow_size
        return cx < asz && -1 || (cx >= (self.w - asz) && 1 || 0)
    },

    scroll_to: func(self, cx, cy) {
        var  btn = self.find_child(SliderButton.type, undef, false)
        if !btn { return }

        var asz = self.arrow_size
        var sw, bw = self.w, btn.w

        var pos = clamp((cx - asz - bw / 2) / (sw - 2 * asz - bw), 0, 1)
        var steps = abs(self.max_value - self.min_value) / self.step_size
        var step = round(steps * pos)

        self::set_step(self, step)
    },

    adjust_children: func(self) {
        var  btn = self.find_child(SliderButton.type, undef, false)
        if !btn { return }
        btn._slider = self

        var mn, mx, ss = self.min_value, self.max_value, self.step_size

        var steps   = abs(mx - mn) / self.step_size
        var curstep = (self.value - min(mx, mn)) / ss

        var asz = self.arrow_size

        var width = max(self.w - 2 * asz, 0)

        btn.w = max(btn.w, width / steps)
        btn.x = asz + (width - btn.w) * curstep / steps
        btn.adjust = btn.adjust & ~adjust.ALIGN_HMASK

        Widget::adjust_children(self)
    },

    move_button: func(self, o, fromx, fromy, tox, toy) {
        self.scroll_to(o.x + o.w / 2 + tox - fromx, o.y + toy)
    }
}, Slider.type)

/**
    See $HSlider above. Has different states, "default", "(up|down)_hovering"
    and  "(up|down)_clicked_(left|right|middle|back|forward)".
*/
M.VSlider = register_type("VSlider", Slider, {
    choose_state: func(self) {
        var ad = self.arrow_dir

        if ad == -1 {
            var clicked = clicked_states[self.is_clicked()]
            return clicked && "up_" ~ clicked ||
                (self.is_hovering() && "up_hovering" || "default")
        } else if ad == 1 {
            var clicked = clicked_states[self.is_clicked()]
            return clicked && "down_" ~ clicked ||
                (self.is_hovering() && "down_hovering" || "default")
        }
        return "default"
    },

    choose_direction: func(self, cx, cy) {
        var asz = self.arrow_size
        return cy < asz && -1 || (cy >= (self.h - asz) && 1 || 0)
    },

    scroll_to: func(self, cx, cy) {
        var  btn = self.find_child(SliderButton.type, undef, false)
        if !btn { return }

        var asz = self.arrow_size
        var sh, bh = self.h, btn.h

        var pos = clamp((cy - asz - bh / 2) / (sh - 2 * asz - bh), 0, 1)
        var steps = abs(self.max_value - self.min_value) / self.step_size
        var step = round(steps * pos)

        self::set_step(self, step)
    },

    adjust_children: func(self) {
        var  btn = self.find_child(SliderButton.type, undef, false)
        if !btn { return }
        btn._slider = self

        var mn, mx, ss = self.min_value, self.max_value, self.step_size

        var steps   = (max(mx, mn) - min(mx, mn)) / ss + 1
        var curstep = (self.value - min(mx, mn)) / ss

        var asz = self.arrow_size

        var height = max(self.h - 2 * asz, 0)

        btn.h = max(btn.h, height / steps)
        btn.y = asz + (height - btn.h) * curstep / steps
        btn.adjust = btn.adjust & ~adjust.ALIGN_VMASK

        Widget::adjust_children(self)
    },

    move_button: func(self, o, fromx, fromy, tox, toy) {
        self::scroll_to(self, o.x + o.h / 2 + tox, o.y + toy - fromy)
    }
}, Slider.type)
