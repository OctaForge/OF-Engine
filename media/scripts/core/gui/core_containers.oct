/**<
    Container GUI widgets.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

from std.math import min, max

/// Module: core
import core.gui.core as M

// consts
from core.gui.core import gl, key

// widget types
from core.gui.core import register_type

// children iteration
from core.gui.core import loop_children, loop_children_r

// base widgets
var Widget = M::get_type("Widget")

// setters
from core.gui.core import gen_setter

// adjustment
from core.gui.core import adjust

var CLAMP_LEFT, CLAMP_RIGHT, CLAMP_TOP, CLAMP_BOTTOM in adjust

func clampsv(adj) {
    return ((adj & CLAMP_TOP) != 0) && ((adj & CLAMP_BOTTOM) != 0)
}
func clampsh(adj) {
    return ((adj & CLAMP_LEFT) != 0) && ((adj & CLAMP_RIGHT) != 0)
}

/**
    A horizontal box. Boxes are containers that hold multiple widgets that
    do not cover each other.

    Properties:
        - padding - the padding between the items (the actual width is the
          width of the items extended by (nitems - 1) * padding).
        - expand - a boolean, if true, items clamped from both left and
          right will divide the remaining space the other items didn't
          fill between themselves, in the other case clamping will have
          no effect and the items will be aligned evenly through the list.
        - homogenous - the box will attempt to reserve an equal amount of
          space for every item in the box, items that clamp will be clamped
          inside of their space and the other items will be aligned depending
          on their own alignment. Takes precedence over "expand". Only one can
          be in effect and both default to false.

    See also:
        - $VBox
        - $Grid
*/
M.HBox = register_type("HBox", Widget, {
    __ctor: func(self, kwargs, ...) {
        kwargs = kwargs || {}
        self.padding    = kwargs.padding    || 0
        self.expand     = kwargs.expand     || false
        self.homogenous = kwargs.homogenous || false
        return Widget::__ctor(self, kwargs, ...)
    },

    layout: func(self) {
        self.w, self.h = 0, 0
        var subw = 0
        var ncl, ex = 0, self.expand
        loop_children(self, func(o) {
            o.x = subw
            o.y = 0
            o.layout()
            subw += o.w
            self.h = max(self.h, o.y + o.h)
            if ex && clampsh(o.adjust) { ncl += 1 }
        })
        self.w = subw + self.padding * max(self.vchildren.len() +
            self.children.len() - 1, 0)
        self.subw, self.ncl = subw, ncl
    },

    adjust_children_regular: func(self, no, hmg) {
        var offset, space = 0, (self.w - self.subw) / max(no - 1, 1)
        loop_children(self, func(o) {
            o.x = offset
            offset += o.w + space
            o.adjust_layout(o.x, 0, o.w, self.h)
        })
    },

    adjust_children_homogenous: func(self, no) {
        var pad = self.padding
        var offset, space = 0, (self.w - self.subw - (no - 1) * pad)
            / max(no, 1)
        loop_children(self, func(o) {
            o.x = offset
            offset += o.w + space + pad
            o.adjust_layout(o.x, 0, o.w + space, self.h)
        })
    },

    adjust_children_expand: func(self, no) {
        var pad = self.padding
        var dpad = pad * max(no - 1, 0)
        var offset, space = 0, ((self.w - self.subw) / self.ncl - dpad)
        loop_children(self, func(o) {
            o.x = offset
            o.adjust_layout(o.x, 0, o.w + (clampsh(o.adjust) && space || 0),
                self.h)
            offset += o.w + pad
        })
    },

    adjust_children: func(self) {
        var nch, nvs = self.children.len(), self.vchildren.len()
        if nch == 0 && nvs == 0 { return }
        if self.homogenous {
            return self.adjust_children_homogenous(nch + nvs)
        } else if self.expand && self.ncl != 0 {
            return self.adjust_children_expand(nch + nvs)
        }
        return self.adjust_children_regular(nch + nvs)
    },

    /// Function: set_padding
    set_padding: gen_setter("padding"),

    /// Function: set_expand
    set_expand: gen_setter("expand"),

    /// Function: set_homogenous
    set_homogenous: gen_setter("homogenous")
})

/**
    See $HBox. This is a vertical variant, for its properties top/bottom
    clamping is relevant rather than left/right.
*/
M.VBox = register_type("VBox", Widget, {
    __ctor: func(self, kwargs, ...) {
        kwargs = kwargs || {}
        self.padding    = kwargs.padding    || 0
        self.expand     = kwargs.expand     || false
        self.homogenous = kwargs.homogenous || false
        return Widget::__ctor(self, kwargs, ...)
    },

    layout: func(self) {
        self.w, self.h = 0, 0
        var subh = 0
        var ncl, ex = 0, self.expand
        loop_children(self, func(o) {
            o.x = 0
            o.y = subh
            o.layout()
            subh += o.h
            self.w = max(self.w, o.x + o.w)
            if ex && clampsv(o.adjust) { ncl += 1 }
        })
        self.h = subh + self.padding * max(self.vchildren.len() +
            self.children.len() - 1, 0)
        self.subh, self.ncl = subh, ncl
    },

    adjust_children_regular: func(self, no) {
        var offset, space = 0, (self.h - self.subh) / max(no - 1, 1)
        loop_children(self, func(o) {
            o.y = offset
            offset += o.h + space
            o.adjust_layout(0, o.y, self.w, o.h)
        })
    },

    adjust_children_homogenous: func(self, no) {
        var pad = self.padding
        var offset, space = 0, (self.h - self.subh - (no - 1) * pad)
            / max(no, 1)
        loop_children(self, func(o) {
            o.y = offset
            offset += o.h + space + pad
            o.adjust_layout(0, o.y, self.w, o.h + space)
        })
    },

    adjust_children_expand: func(self, no) {
        var pad = self.padding
        var dpad = pad * max(no - 1, 0)
        var offset, space = 0, ((self.h - self.subh) / self.ncl - dpad)
        loop_children(self, func(o) {
            o.y = offset
            o.adjust_layout(0, o.y, self.w,
                o.h + (clampsv(o.adjust) && space || 0))
            offset += o.h + pad
        })
    },

    adjust_children: func(self) {
        var nch, nvs = self.children.len(), self.vchildren.len()
        if nch == 0 && nvs == 0 { return }
        if self.homogenous {
            return self.adjust_children_homogenous(nch + nvs)
        } else if self.expand && self.ncl != 0 {
            return self.adjust_children_expand(nch + nvs)
        }
        return self.adjust_children_regular(nch + nvs)
    },

    /// Function: set_padding
    set_padding: gen_setter("padding"),

    /// Function: set_expand
    set_expand: gen_setter("expand"),

    /// Function: set_homogenous
    set_homogenous: gen_setter("homogenous")
}, M.HBox.type)

/**
    A grid of elements. As you append, the children will automatically
    position themselves according to the max number of columns.

    If you want both horizontal and vertical padding to be the same you can
    set it with unified setter "padding" (both kwargs and methods), but
    it's not actually there. Using a method emits set for both paddings.

    Properties:
        - columns - the number of columns the grid will have at maximum,
          defaulting to 0.
        - padding_h - the horizontal padding between grid items
        - padding_v - the vertical padding between grid items

    See also:
        - $HBox
*/
M.Grid = register_type("Grid", Widget, {
    __ctor: func(self, kwargs, ...) {
        kwargs = kwargs || {}
        self.columns = kwargs.columns || 0
        self.padding_h = kwargs.padding_h || kwargs.padding || 0
        self.padding_v = kwargs.padding_v || kwargs.padding || 0
        return Widget::__ctor(self, kwargs, ...)
    },

    layout: func(self) {
        var widths, heights = [], []
        self.widths, self.heights = widths, heights

        var column, row = 0, 0
        var columns, ph, pv = self.columns, self.padding_h, self.padding_v

        loop_children(self, func(o) {
            o.layout()

            if column >= widths.len() {
                widths.push(o.w)
            } else if o.w > widths[column] {
                widths[column] = o.w
            }

            if row >= heights.len() {
                heights.push(o.h)
            } else if o.h > heights[row] {
                heights[row] = o.h
            }

            column = (column + 1) % columns
            if column == 0 {
                row += 1
            }
        })

        var subw, subh = 0, 0
        for i, v in widths .each() { subw += v }
        for i, v in heights.each() { subh += v }
        self.w = subw + ph * max(widths .len() - 1, 0)
        self.h = subh + pv * max(heights.len() - 1, 0)
        self.subw, self.subh = subw, subh
    },

    adjust_children: func(self) {
        if self.children.empty() && self.vchildren.empty() { return }
        var widths, heights = self.widths, self.heights
        var column , row     = 0, 0
        var offsetx, offsety = 0, 0
        var cspace = (self.w - self.subw) / max(widths .len()  - 1, 1)
        var rspace = (self.h - self.subh) / max(heights.len() - 1, 1)
        var columns = self.columns

        loop_children(self, func(o) {
            o.x = offsetx
            o.y = offsety

            var wc, hr = widths[column], heights[row]
            o.adjust_layout(offsetx, offsety, wc, hr)

            offsetx += wc + cspace
            column = (column + 1) % columns

            if column == 0 {
                offsetx = 0
                offsety += hr + rspace
                row += 1
            }
        })
    },

    /// Function: set_padding_h
    set_padding_h: gen_setter("padding_h"),

    /// Function: set_padding_v
    set_padding_v: gen_setter("padding_v"),

    /// Function: set_padding
    set_padding: func(self, v) {
        self.set_padding_h(v)
        self.set_padding_v(v)
    },

    /// Function: set_columns
    set_columns: gen_setter("columns")
})

/**
    Clips the children inside of it by its properties.

    Properties:
        - clip_w - the width of the clipper.
        - clip_h - the height of the clipper.
*/
M.Clipper = register_type("Clipper", Widget, {
    __ctor: func(self, kwargs, ...) {
        kwargs = kwargs || {}
        self.clip_w = kwargs.clip_w || 0
        self.clip_h = kwargs.clip_h || 0
        self.virt_w = 0
        self.virt_h = 0

        return Widget::__ctor(self, kwargs, ...)
    },

    layout: func(self) {
        Widget::layout(self)
    
        self.virt_w = self.w
        self.virt_h = self.h

        self.w = min(self.w, self.clip_w)
        self.h = min(self.h, self.clip_h)
    },

    adjust_children: func(self) {
        Widget::adjust_children(self, 0, 0, self.virt_w, self.virt_h)
    },

    draw: func(self, sx, sy) {
        var w, h in self

        if (w != 0 && self.virt_w > w) || (h != 0 && self.virt_h > h)
        {
            self.stop_draw()
            self.get_root().clip_push(sx, sy, w, h)
            Widget::draw(self, sx, sy)
            self.stop_draw()
            self.get_root().clip_pop()
        } else {
            return Widget::draw(self, sx, sy)
        }
    },

    /// Function: set_clip_w
    set_clip_w: gen_setter("clip_w"),

    /// Function: set_clip_h
    set_clip_h: gen_setter("clip_h")
})
