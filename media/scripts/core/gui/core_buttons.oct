/**<
    Various button widgets.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

/// Module: core
import core.gui.core as M

// widget types
from core.gui.core import register_type

// base widgets
var Widget = M::get_type("Widget")

// setters
from core.gui.core import gen_setter

// keys
from core.gui.core import key

var clicked_states = {
    (key.MOUSELEFT   ): "clicked_left",
    (key.MOUSEMIDDLE ): "clicked_middle",
    (key.MOUSERIGHT  ): "clicked_right",
    (key.MOUSEBACK   ): "clicked_back",
    (key.MOUSEFORWARD): "clicked_forward"
}

/**
    A button has five states, "default", "hovering", "clicked_left",
    "clicked_right" and "clicked_middle". On click it emits the "click" signal
    on itself (which is handled by $Widget, the button itself doesn't do
    anything).
*/
M.Button = register_type("Button", Widget, {
    choose_state: func(self, dis) {
        if dis { return "disabled" }
        return clicked_states[self.is_clicked()] ||
            (self.is_hovering() && "hovering" || "default")
    },

    /**
        Buttons can take be hovered on. Assuming `self.target(cx, cy)` returns
        anything, this returns itself. That means if a child can be targeted,
        the hovered widget will be the button itself.
    */
    hover: func(self, cx, cy) {
        return self.target(cx, cy) && self
    },

    /// See $hover.
    click: func(self, cx, cy) {
        return self.target(cx, cy) && self
    }
})
var Button = M.Button

/**
    Like $Button, but adds a new state, "menu", when a menu is currently
    opened using this button.
*/
M.MenuButton = register_type("MenuButton", Button, {
    choose_state: func(self, dis) {
        if dis { return "disabled" }
        return self.get_menu() != undef && "menu" || Button::choose_state(self)
    }
})

/**
    Derived from $Button. The space key serves the same purpose as clicking
    (when focused).

    Properties:
        - condition - a callable object, if it returns something that evaluates
          as true, either the "toggled" or "toggled_hovering" state is used,
          otherwise "default" or "default_hovering" is used. The condition
          is passed the current object as an argument.
*/
M.Toggle = register_type("Toggle", Button, {
    __ctor: func(self, kwargs, ...) {
        kwargs = kwargs || {}
        self.condition = kwargs.condition
        return Button::__ctor(self, kwargs, ...)
    },

    choose_state: func(self, dis) {
        var cond = self.condition && self.condition()
        if dis {
            if cond {
                return "toggled_disabled"
            } else {
                return "default_disabled"
            }
        }
        var h, f = self.is_hovering(), self.is_focused()
        return (cond &&
            (h && "toggled_hovering" || (f && "toggled_focused"
                || "toggled")) ||
            (h && "default_hovering" || (f && "default_focused"
                || "default")))
    },

    key: func(self, code, isdown) {
        if self.is_focused() && code == key.SPACE {
            self.emit(isdown && "clicked" || "released", -1, -1, code)
            return true
        }
        return Widget::key(self, code, isdown)
    },

    /// Function: set_condition
    set_condition: gen_setter("condition")
})
