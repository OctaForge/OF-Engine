/**<
    Implements "state variables". State variables are basically entity
    properties. They mimick real property behavior. They automatically
    sync changes between clients/server as required. They can be of
    various types and new svar types are easily implementable.

    Author:
        q66 <quaker66@gmail.com>

    License:
        See COPYING.txt.
*/

import capi

import core.logger as logging

var log = logging.log
var DEBUG = logging.DEBUG
var INFO  = logging.INFO

import core.events.frame
import core.octascript.geom

from std.object import Object
from std.table import rawget, rawset
from std.math import abs, round, floor
from std.conv import tonumber, tostring
from std.util import assert

/// Module: svars
var M = {}

var StateVariable, StateVariableAlias, StateInteger, StateFloat,
      StateBoolean, StateTable, StateString, ArraySurrogate, StateArray,
      StateArrayInteger, StateArrayFloat

/// Checks whether the given value is a state variable.
M.is_svar = func(v) {
    return (typeof v == "table" && v.is_a) && v.is_a(StateVariable)
}

/// Checks whether the given value is a state variable alias.
M.is_svar_alias = func(v) {
    return (typeof v == "table" && v.is_a) && v.is_a(StateVariableAlias)
}

var define_accessors = func(cl, n, gf, sf, d) {
    cl["__get_" ~ n] = func(self) {
        return gf(self, d)
    }
    cl["__set_" ~ n] = func(self, v) {
        return sf(self, v, d)
    }
}

/**
    Provides a base object for a state variable. Specialized svar types
    clone this and define their own methods. Fields can be initialized via
    kwargs.

    Fields:
        - client_read [true] - clients can read the value.
        - client_write [true] - the value can be written clientside
          (indirectly through a server message).
        - client_set [false] - the value can be written clientside
          directly without a server message.
        - client_private [false] - the value will be private to the client,
          other clients won't see it (but the server will).
        - custom_sync [false] - the state variable will use a custom sync
          method (useful for Cube 2 dynents).
        - gui_name [undef] - the name shown in the editing GUI for the svar.
          Can be set to false to hide it from the editing GUI completely.
        - alt_name [undef] - an alternative accessor name.
        - reliable [true] - the messages sent for this svar will be reliable,
          that is, always sent; you cannot send a big number of them. For
          e.g. position updates, you're better off with unreliable messages
          that do not need to be sent all the time.
        - has_history [true] - the var will retain its state and e.g.
          when a new client requests it, it'll receive the values set
          previously (even if set long before the connection).
        - getter_fun [undef] - provided in kwargs as just "getter", a custom
          getter for the state var, used typically with C functions (to handle
          C-side entity changes), takes one argument, an entity this state
          var belongs to.
        - setter_fun [undef] - provided in kwargs as just "setter", a custom
          setter similar to getter. Takes two arguments, the entity and the
          value we're setting. Note that even with getter and setter functions
          the value will be cached for better performance (so we don't always
          have to query).
*/
M.StateVariable = Object.clone({
    name: "StateVariable",

    /// Makes svar objects return their name on tostring.
    __tostring: func(self) {
        return self.name
    },

    /// Initializes the svar. Parameters are passed in kwargs (a dict).
    __ctor: func(self, kwargs) {
        @[debug] log(INFO, "StateVariable: init")

        kwargs = kwargs || {}

        self.client_read    = (kwargs.client_read  != undef) ? kwargs.client_read  : true
        self.client_write   = (kwargs.client_write != undef) ? kwargs.client_write : true
        self.client_set     = kwargs.client_set     || false
        self.client_private = kwargs.client_private || false

        self.custom_sync = kwargs.custom_sync || false

        self.gui_name, self.alt_name = kwargs.gui_name, kwargs.alt_name

        self.reliable    = (kwargs.reliable    != undef) ? kwargs.reliable    : true
        self.has_history = (kwargs.has_history != undef) ? kwargs.has_history : true

        self.getter_fun = kwargs.getter
        self.setter_fun = kwargs.setter
    },

    /**
        Registers the state variable, given an entity prototype. It'll create
        getter and setter methods on the entity prototype for the given name
        and also for `alt_name` if set in constructor kwargs. You can access
        the raw state variable on the entity prototype by prefixing it with
        `_SV`. You can access the variable by gui_name by prefixing it with
        `_SV_GUI_` (if `gui_name` is not defined, regular name is used, if
        `gui_name` is false, this field won't exist at all).

        Arguments:
            - name - the state var name.
            - cl - the entity prototype.
    */
    register: func(self, name, cl) {
        @[debug] log(DEBUG, "StateVariable: register(" ~ name
            ~ ", " ~ cl.name ~ ")")

        self.name = name
        cl["_SV_" ~ name] = self

        assert(self.getter)
        assert(self.setter)

        @[debug] log(DEBUG, "StateVariable: register: getter/setter")
        define_accessors(cl, name, self.getter, self.setter, self)

        var an = self.alt_name
        if an {
            @[debug] log(DEBUG, "StateVariable: register: alt g/s")
            cl["_SV_" ~ an] = self
            define_accessors(cl, an, self.getter, self.setter, self)
        }
        var gn = self.gui_name
        if gn != false {
            cl["_SV_GUI_" ~ (gn || name)] = self
        }
    },

    /**
        Performs clientside svar read tests. On the server we can always
        read, on the client we can't if client_read is false. Fails an
        assertion if on the client and client_read is false.
    */
    read_tests: func(self, ent) {
        assert(self.client_read || @[server,true,false])
    },

    /**
        Performs clientside svar write tests. On the server we can always
        write, on the client we can't if client_write is false. Fails an
        assertion if on the client and client_read is false (or if an
        entity is deactivated/uninitialized).
    */
    write_tests: func(self, ent) {
        if ent.deactivated {
            assert(false, "Writing a field " ~ self.name ~
                 " of a deactivated entity " ~ ent.name ~
                 "(" ~ ent.uid ~ ")")
        }

        assert(self.client_write || @[server,true,false])
        assert(ent.initialized)
    },

    /**
        Default getter for a state variable. Works on an entity (which
        is self here). It mostly simply returns the value from an internal
        table. It performs read tests.

        Note that if custom getter function is provided in the constructor's
        kwargs and no sufficient value is cached, it'll return the value
        the getter function returns (and it'll also save into the cache
        for further use).

        Arguments:
            - self - not the state var, it's an entity.
            - svar - the state var.
    */
    getter: func(self, svar) {
        svar.read_tests(self)

        var vn = svar.name
        @[debug] log(INFO, "StateVariable: getter: " ~ vn)

        var fr = frame::get_frame()

        if !svar.getter_fun
            || @[server,self.svar_change_queue]
            || self.svar_value_timestamps[vn] == fr
        {
            return self.svar_values[vn]
        }

        @[debug] log(INFO, "StateVariable: getter: getter function")

        var val = svar::getter_fun(self[self.__pass_id])

        if @[server,self.svar_change_queue_complete,true] {
            self.svar_values[vn] = val
            self.svar_value_timestamps[vn] = fr
        }

        return val
    },

    /**
        Default setter for a state variable. It simply sets state data.

        Arguments:
            - self - not the state var, it's an entity.
            - val - the value.
            - svar - the state var.
    */
    setter: func(self, val, svar) {
        svar.write_tests(self)
        self.set_sdata(svar.name, val, -1)
    },

    /**
        Validates a state variable value. The default simply returns
        true. Can be overriden.
    */
    validate: func(self, val) { return true },

    /**
        Checks whether changes of this variable should be synced with other
        clients. Returns true if this variable is not client_private or if the
        target client number equals the client number of the given entity.

        Arguments:
            - ent - the entity.
            - tcn - target client number.
    */
    should_send: func(self, ent, tcn) {
        return (!self.client_private) || (ent.cn == tcn)
    },

    /**
        Converts the given value to wire format for this state variable.
        It's a string meant for final network transmission. On the other
        side it's simply converted back to the original format using
        $from_wire. By default simply converts to string.
    */
    to_wire: func(self, val) {
        return tostring(val)
    },

    /**
        Converts the given value in wire format back to the original
        format. See $to_wire. By default simply returns a string.
    */
    from_wire: func(self, val) {
        return tostring(val)
    }
})
StateVariable = M.StateVariable

/**
    Specialization of $StateVariable for integer values. Overrides
    to_ and from_ wire appropriately, to_wire converts to a string,
    from_wire converts to an integer.
*/
M.StateInteger = StateVariable.clone({
    name: "StateInteger",

    to_wire  : func(self, val) { return tostring(val) },
    from_wire: func(self, val) { return floor(tonumber(val)) }
})
StateInteger = M.StateInteger

/**
    Specialization of $StateVariable for float values. Overrides
    to_ and from_ wire appropriately, to_wire converts to a string
    (with max two places past the floating point represented in the
    string), from_wire converts to a float.
*/
M.StateFloat = StateVariable.clone({
    name: "StateFloat",

    to_wire  : func(self, val) { return tostring(round(val, 2)) },
    from_wire: func(self, val) { return tonumber(val) }
})
StateFloat = M.StateFloat

/**
    Specialization of $StateVariable for boolean values. Overrides
    to_ and from_ wire appropriately, to_wire converts to a string,
    from_wire converts to a boolean.
*/
M.StateBoolean = StateVariable.clone({
    name: "StateBoolean",

    to_wire  : func(self, val) { return tostring(val) },
    from_wire: func(self, val) { return val == "true" && true || false }
})
StateBoolean = M.StateBoolean

from std.conv import serialize as ts, deserialize as td

/**
    Specialization of $StateVariable for table values. Overrides
    to_ and from_ wire appropriately, to_wire serializes the given
    table, from_wire deserializes it.
*/
M.StateTable = StateVariable.clone({
    name: "StateTable",

    to_wire  : func(self, val) { return ts(val) },
    from_wire: func(self, val) { return td(val) }
})
StateTable = M.StateTable

/**
    Specialization of $StateVariable for string values. Doesn't
    override to_ and from_wire, because the defaults already work
    with strings.
*/
M.StateString = StateVariable.clone({
    name: "StateString"
})
StateString = M.StateString

from std.table import getmt, setmt
from std.util import proxy as newproxy

import std.array

/**
    Represents a "surrogate" for an array. Behaves like a regular
    array, but does not actually contain anything; it merely serves
    as an interface for state variables like $StateArray.

    You can manipulate this like a regular array (check its length,
    index it, assign indexes) but many of the functions from the
    table library likely won't work.

    Note that surrogates are not regular objects created using the
    prototypal system. They're manually managed with metatables and
    proxies in order to more closely emulate the appropriate semantics.
*/
M.ArraySurrogate = {
    name: "ArraySurrogate",

    /**
        Constructs the array surrogate. Defines its members "entity"
        and "variable", assigned using the provided arguments.
    */
    new: func(self, ent, svar) {
        @[debug] log(INFO, "ArraySurrogate: new: " ~ svar.name)
        var rawt = { entity: ent, variable: svar }
        rawt.rawt = rawt // yay!cycles!
        var ret = newproxy(true)
        var mt  = getmt(ret)
        mt.__tostring = self.__tostring
        mt.__index    = setmt(rawt, self)
        mt.__newindex = self.__newindex
        return ret
    },

    /// Makes surrogate objects return their names on tostring.
    __tostring: func(self) {
        return self.name
    },

    /**
        Called each time you index an array surrogate. It checks
        the validity of the given index by converting it to a number
        and flooring it. On invalid indexes, it simply fallbacks to
        regular indexing.
    */
    __index: func(self, name) {
        if name == "__size" {
            return self.len()
        }
        var n = tonumber(name)
        if !n {
            return ArraySurrogate[name] || rawget(self.rawt, name)
        }
        var i = floor(n)
        if i != n {
            return ArraySurrogate[name] || rawget(self.rawt, name)
        }

        var v = self.variable
        return v.get_item(self.entity, i)
    },

    /**
        Called each time you set an index on an array surrogate. It checks
        the validity of the given index by converting it to a number and
        flooring it. If the given index is not an integer, this fallbacks
        to regular setting. Otherwise sets the corresponding element using
        the state variable.
    */
    __newindex: func(self, name, val) {
        var n = tonumber(name)
        if !n { return rawset(self.rawt, name, val) }
        var i = floor(n)
        if i != n { return rawset(self.rawt, name, val) }

        var v = self.variable
        v.set_item(self.entity, i, val)
    },

    /// Returns the length of the "array" represented by the state variable.
    len: func(self) {
        var v = self.variable
        return v.get_length(self.entity)
    },

    /// Returns a raw array of values stored using the state variable.
    to_array: func(self) {
        var l = self.len()
        var r = []
        for i in 0 to l - 1 {
            r.push(self[i])
        }
        return r
    },

    /// Appends an element. For convenience only.
    push: func(self, v) {
        self.variable.push_item(self.entity, v)
    },

    map: array.map,
    merge: array.merge,
    filter: array.filter,
    find: array.find,
    find_r: array.find_r,
    foldr: array.foldr,
    foldl: array.foldl,
    each: array.each,
    each_r: array.each_r,
    first: array.first,
    last: array.last,
    empty: array.empty
}
ArraySurrogate = M.ArraySurrogate

/**
    Specialization of <StateVariable> for arrays. Uses $ArraySurrogate
    to provide an array-like "interface". The surrogate is required to
    properly reflect array element changes. This is the first state
    variable object that requires more complex to_wire and from_wire
    functions.
*/
M.StateArray = StateVariable.clone({
    name: "StateArray",

    /// An element separator used by the wire format. Defaults to "|".
    separator: "|",

    /**
        Specifies the surrogate used by the state variable. By default
        it's $ArraySurrogate, but may be overriden.
    */
    surrogate: ArraySurrogate,

    /**
        Instead of returning the raw value in non-wire format, this
        overriden getter returns the appropriate $surrogate. It
        does not create a new surrogate each time; it's cached
        for performance reasons. Performs read tests.

        See also:
            - {{$StateVariable.getter}}
    */
    getter: func(self, svar) {
        svar.read_tests(self)

        if !svar.get_raw(self) { return undef }

        var n = "__as_" ~ svar.name
        if !self[n] { self[n] = svar.surrogate.new(self, svar) }
        return self[n]
    },

    /**
        Works the same as the default setter, but if a surrogate is
        given, then it converts it to a raw array and if a table
        is given, it copies the table before setting it.

        See also:
            - {{$StateVariable.setter}}
    */
    setter: func(self, val, svar) {
        @[debug] log(INFO, "StateArray: setter: " ~ tostring(val))
        svar.write_tests(self)

        self.set_sdata(svar.name,
            val.to_array && val.to_array() || val.copy(), -1)
    },

    /** Function: to_wire_item
        This is not a regular method, it has no self. It's called by
        $to_wire for each value of the array before including it in
        the result.
    */
    to_wire_item: tostring,

    /** Function: from_wire_item
        This is not a regular method, it has no self. It's called by
        $from_wire for each value of the array before including it in
        the result.
    */
    from_wire_item: tostring,

    /**
        Returns the contents of the state array in a wire format. It
        starts with a "[", followed by a list of items separated by
        $separator. It ends with a "]". The value can be either an
        array or an array surrogate.
    */
    to_wire: func(self, val) {
        return "[" ~ (val.to_array && val.to_array() || val)
            .map(self.to_wire_item).concat(self.separator) ~ "]"
    },

    /// Converts a string in a format given by $to_wire back to a table.
    from_wire: func(self, val) {
        return (val == "[]") && [] || val.sub(1, val.len() - 1)
            .split(self.separator).map(self.from_wire_item)
    },

    /**
        Returns the raw array of state data. Retrieved from var storage
        without syncing assuming there is either no existing getter function
        or a sufficient cached value. Otherwise returns the result of a
        getter function call and caches it.
    */
    get_raw: func(self, ent) {
        var vn = self.name
        @[debug] log(INFO, "StateArray: get_raw: " ~ vn)

        if !self.getter_fun {
            return ent.svar_values[vn] || []
        }

        var fr = frame::get_frame()

        if @[server,ent.svar_change_queue] || ent.svar_value_timestamps[vn] == fr
        {
            return ent.svar_values[vn]
        }

        @[debug] log(INFO, "StateArray: get_raw: getter function")

        var val = self::getter_fun(ent[ent.__pass_id])

        if @[server,ent.svar_change_queue_complete,true] {
            ent.svar_values[vn] = val
            ent.svar_value_timestamps[vn] = fr
        }

        return val
    },

    /// Retrieves the state array length. Used by the surrogate.
    get_length: func(self, ent) {
        return self.get_raw(ent).len()
    },

    /**
        Retrieves a specific element from the state array. Used by
        the surrogate.
    */
    get_item: func(self, ent, idx) {
        @[debug] log(INFO, "StateArray: get_item: " ~ idx)
        return self.get_raw(ent)[idx]
    },

    _get_raw_common: func(self, ent, val) {
        var a = self.get_raw(ent)
        if typeof val == "string" {
            assert(!val.find("%" ~ self.separator))
        }
        return a
    },

    /**
        Sets an element in the state array. Used by the surrogate. Performs
        an update on all clients by setting the state data on the entity.
    */
    set_item: func(self, ent, idx, val) {
        @[debug] log(INFO, "StateArray: set_item: " ~ idx ~ ", "
            ~ tostring(val))
        var a = self._get_raw_common(ent, val)
        a[idx] = val
        ent.set_sdata(self.name, a, -1)
    },

    push_item: func(self, ent, val) {
        @[debug] log(INFO, "StateArray: push: " ~ tostring(val))
        var a = self._get_raw_common(ent, val)
        a.push(val)
        ent.set_sdata(self.name, a, -1)
    }
})
StateArray = M.StateArray

/**
    A variant of $StateArray for integer contents. Overrides to_wire_item,
    which converts a value to a string and from_wire_item, which converts
    it back to an integer.
*/
M.StateArrayInteger = StateArray.clone({
    name: "StateArrayInteger",

    to_wire_item  : tostring,
    from_wire_item: func(v) { return floor(tonumber(v)) }
})
StateArrayInteger = M.StateArrayInteger

/**
    A variant of $StateArray for floating point contents. Overrides
    to_wire_item, which converts a value to a string (with max two places
    past the floating point represented in the string) and from_wire_item,
    which converts it back to a float.
*/
M.StateArrayFloat = StateArray.clone({
    name: "StateArrayFloat",

    to_wire_item  : func(v) { return tostring(round(v, 2)) },
    from_wire_item: tonumber
})
StateArrayFloat = M.StateArrayFloat

/**
    A specialization of StateArrayFloat, providing its own surrogate,
    {{$geom.Vec2_Surrogate}}. Other than that, no changes are made.
*/
M.StateVec2 = StateArrayFloat.clone({
    name: "StateVec2",
    surrogate: geom.Vec2_Surrogate
})

/**
    A specialization of StateArrayFloat, providing its own surrogate,
    {{$geom.Vec3_Surrogate}}. Other than that, no changes are made.
*/
M.StateVec3 = StateArrayFloat.clone({
    name: "StateVec3",
    surrogate: geom.Vec3_Surrogate
})

/**
    A specialization of StateArrayFloat, providing its own surrogate,
    {{$geom.Vec4_Surrogate}}. Other than that, no changes are made.
*/
M.StateVec4 = StateArrayFloat.clone({
    name: "StateVec4",
    surrogate: geom.Vec4_Surrogate
})

/**
    Aliases a state variable. Aliases are always registered last so that
    the variables they alias are already registered. They provide alternative
    getters and setters.
*/
StateVariableAlias = StateVariable.clone({
    name: "StateVariableAlias",

    /**
        Variable aliases don't really need all the properties, so the parent
        constructor is never called. They have one property, target_name,
        given by the constructor argument, which specifies the name of
        the state variable they point to.
    */
    __ctor: func(self, tname) {
        self.target_name = tname
    },

    /**
        Overriden registration function. It simply sets up the alias
        getter and setter. It also creates the _SV_ prefixed raw accessor
        pointing to the target var. See {{$StateVariable.register}}.
    */
    register: func(self, name, cl) {
        @[debug] log(DEBUG, "StateVariableAlias: register(" ~ name
            ~ ", " ~ cl.name ~ ")")

        self.name = name
        var tg = cl["_SV_" ~ self.target_name]
        cl["_SV_" ~ name] = tg

        @[debug] log(DEBUG, "StateVariableAlias: register: getter/setter")
        define_accessors(cl, name, self.getter, self.setter, self)
    }
})
M.StateVariableAlias = StateVariableAlias

return M
