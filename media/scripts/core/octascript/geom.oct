/**<
    Geometry utilities.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import capi
from std.geom import Vec3
from std.math import min, max

/**
    Returns the distance to the floor below some given position.

    Arguments:
        - max_dist - the maximum distance.
        - radius - optionally the radius to search within.
        - lowest - if true, finds the lowest floor instead of highest
          floor, optional.
*/
export func floor_distance(self, max_dist, radius, lowest) {
    var rt = capi::ray_floor(self.x, self.y, self.z, max_dist)
    if !radius { return rt }

    var tbl = [ -radius / 2, 0, radius / 2 ]
    var f = lowest ? max : min
    for x in 0 to tbl.len() - 1 {
        for y in 0 to tbl.len() - 1 {
            var o = self.add_new(Vec3(tbl[x], tbl[y], 0))
            rt = f(rt, capi::ray_floor(o.x, o.y, o.z, max_dist))
        }
    }

    return rt
}

/**
    Returns true is the line between two given positions is clear
    (if there are no obstructions). Returns false otherwise.
*/
export func is_los(self, d) {
    return capi::ray_los(self.x, self.y, self.z, d.x, d.y, d.z)
}
