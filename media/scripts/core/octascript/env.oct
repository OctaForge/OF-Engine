/**<
    Provides environment management for sandboxed scripts.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import core.logger
import core.octascript.stream

import std.table
import std.package

var env_package = {
    preload: {}
}

from std.util import assert
from std.eval import load
from std.table import pairs, getmt, setmt, rawget, concat as tconc
from std.environ import set as setfenv, globals

var rt_core = rawget(globals, "__rt_core")
var rt_import = rt_core["import"]

var ploaded = package.loaded
var eloaded = {}

import std.io as std_io
import std.os as std_os

var std_filtered = {
    "std.io": {
        write: std_io.write
    },
    "std.os": {
        clock   : std_os.clock,
        date    : std_os.date,
        difftime: std_os.difftime,
        time    : std_os.time
    },
    "std.table": {}
}

var tbl_f = std_filtered["std.table"]

for k, v in pairs(table) {
    tbl_f[k] = v
}

tbl_f["getmt"] = func(tbl) {
    if typeof tbl == "table" {
        return getmt(tbl)
    }
    return undef
}

var disallow = {
    "core.externals": true, "core.octascript.stream": true,
    "std.jit": true, "std.debug": true, "std.environ": true,
    "std.eval": true, "std.ffi": true, "std.gc": true,
    "std.package": true, "capi": true, "luastate": true,
    "apiutil": true
}

func gen_envtable() {
    var env, rt = {}, {}
    for k, v in pairs(rt_core) {
        rt[k] = v
    }
    rt["import"] = func(modname) {
        return rt_import(modname, eloaded)
    }
    rt["env"], env["__rt_core"] = env, rt

    for k, v in pairs(ploaded) {
        if !disallow[k] {
            eloaded[k] = std_filtered[k] || v
        } else {
            eloaded[k] = false
        }
    }

    return env
}

/**
    Generates an environment for the gamescript. It's isolated from the outside
    world to some degree, providing some safety against potentially malicious
    code.
*/
export func gen_gamescript_env() {
    env_package.path = package.path
    return gen_envtable()
}

import core.externals

externals::set("gamescript_run", func(fname) {
    var mapenv = gen_gamescript_env()
    func runmap(menv, gname) {
        menv["__rt_core"]["import"](gname)
    }
    setfenv(runmap, mapenv)(mapenv, fname)
})