/**<
    Provides environment management for sandboxed scripts.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import core.logger
import core.octascript.stream

import std.table
import std.package

/// Module: env
var M = {}

var env_package = {
    preload: {}
}

from std.util import assert
from std.eval import loadfile, load
from std.table import pairs, getmt, setmt, rawget, concat as tconc
from std.environ import set as setfenv, globals

var rt_core = rawget(globals, "__rt_core")
var rt_import = rt_core["import"]

var ploaded = package.loaded
var eloaded = {}

import std.io as std_io
import std.os as std_os

var std_filtered = {
    "std.io": {
        write: std_io.write
    },
    "std.os": {
        clock   : std_os.clock,
        date    : std_os.date,
        difftime: std_os.difftime,
        time    : std_os.time
    },
    "std.table": {}
}

var tbl_f = std_filtered["std.table"]

for k, v in pairs(table) {
    tbl_f[k] = v
}

tbl_f["getmt"] = func(tbl) {
    if typeof tbl == "table" {
        return getmt(tbl)
    }
    return undef
}

var disallow = {
    "core.externals": true, "core.octascript.stream": true,
    "std.jit": true, "std.debug": true, "std.environ": true,
    "std.eval": true, "std.gc": true, "std.package": true,
    "capi": true, "ffi": true, "luastate": true
}

var gen_envtable = func() {
    var env, rt = {}, {}
    for k, v in pairs(rt_core) {
        rt[k] = v
    }
    rt["import"] = func(modname) {
        return rt_import(modname, eloaded)
    }
    rt["env"], env["__rt_core"] = env, rt

    for k, v in pairs(ploaded) {
        if !disallow[k] {
            eloaded[k] = std_filtered[k] || v
        } else {
            eloaded[k] = false
        }
    }

    return env
}

/**
    Generates an environment for the gamescript. It's isolated from the outside
    world to some degree, providing some safety against potentially malicious
    code.
*/
M.gen_gamescript_env = func() {
    env_package.path = package.path
    return gen_envtable()
}
var gen_gamescript_env = M.gen_gamescript_env

var consolemap = {
    "capi"                  : "capi",
    "core.engine.camera"    : "camera",
    "core.engine.cubescript": "cubescript",
    "core.engine.stains"    : "stains",
    "core.engine.edit"      : "edit",
    "core.engine.input"     : "input",
    "core.engine.lights"    : "lights",
    "core.engine.model"     : "model",
    "core.engine.particles" : "particles",
    "core.engine.sound"     : "sound",
    "core.entities.ents"    : "ents",
    "core.entities.svars"   : "svars",
    "core.events.actions"   : "actions",
    "core.events.frame"     : "frame",
    "core.events.input"     : "inputev",
    "core.events.signal"    : "signal",
    "core.events.world"     : "world",
    "core.externals"        : "externals",
    "core.gui.core"         : "gui",
    "core.logger"           : "logger",
    "core.octascript.conv"  : "conv",
    "core.octascript.stream": "stream",
    "core.network.msg"      : "msg"
}

var consoleenv
var gen_console_env = func() {
    if consoleenv { return consoleenv }
    var env = {}
    for k, v in pairs(ploaded) {
        var vn = k.find_match("std%::(.+)")
        if vn {
            env[vn] = v
        } else {
            var cmap = consolemap[k]
            if cmap { env[cmap] = v }
        }
    }
    // extra fields
    env["echo"   ] = logger.echo
    env["log"    ] = logger.log
    env["INFO"   ] = logger.INFO
    env["DEBUG"  ] = logger.DEBUG
    env["WARNING"] = logger.WARNING
    env["ERROR"  ] = logger.ERROR

    env["__rt_core"] = rt_core
    consoleenv = env
    return env
}

import core.externals

/** Function: console_oct_run
    An external called when you run OctaScript code in the console. The console
    has its own special environment featuring most of the core modules as
    globals (so that you don't have to type so much).

    Global mappings:
        - capi - capi
        - core.engine.camera - camera
        - core.engine.cubescript - cubescript
        - core.engine.stains - stains
        - core.engine.edit - edit
        - core.engine.input - input
        - core.engine.lights - lights
        - core.engine.model - model
        - core.engine.particles - particles
        - core.engine.sound - sound
        - core.entities.ents - ents
        - core.entities.svars - svars
        - core.events.actions - actions
        - core.events.frame - frame
        - core.events.input - inputev
        - core.events.signal - signal
        - core.events.world - world
        - core.externals - externals
        - core.gui.core - gui
        - core.logger - logger
        - core.octascript.conv - conv
        - core.octascript.stream - stream
        - core.network.msg - msg

    Other global variables:
        - echo, log, INFO, DEBUG, WARNING, ERROR - logger.*
*/
externals::set("console_oct_run", func(str) {
    var env = gen_console_env()
    var ret, err = load(str, "=console", "t", env, true)
    if !ret { return err }
    ret, err = try ret()
    if !ret { return err }
    return undef
})

externals::set("gamescript_run", func(fname) {
    var mapenv = gen_gamescript_env()
    var runmap = func(menv, gname) {
        menv["__rt_core"]["import"](gname)
    }
    setfenv(runmap, mapenv)(mapenv, fname)
})

externals::set("gamescript_verify", func(fn) {
    var f, err = loadfile(fn)
    if !f {
        logger::log(logger.ERROR, "Compilation failed: " ~ err)
        return false
    }
    return true
})

return M
