/**<
    Actions are basically objects that are stored in an action queue.
    You can queue new actions and those will run for example for a period
    of time, depending on the action type. They're used to for example queue
    a player animation for a few seconds, or to trigger a world event at some
    specific point. They have numerous uses generally.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import capi

from core.logger import log, INFO, WARNING

from std.conv import tostring
from std.object import Object

/**
    Provides the base action object other actions can inherit from.
    Takes care of the basic action infrastructure. It doesn't really
    do anything, though.

    Fields:
        - begun - true when the action has begun.
        - finished - true when the action has finished.
        - actor - the entity this belongs to (set automatically by the action
          queue).
        - queue - the action queue this belongs to (set automatically by
          the action queue).
        - start_time - the action start time (current time around action
          initialization).
        - millis_left - how many milliseconds the action takes, can be
          initialized in constructor kwargs.
        - animation - the animation.
        - allow_multiple - a boolean specifying whether multiple actions
          of the same type can be present in one action queue, defaults to
          true (unless it's specified directly in the base object we're
          constructing from, then it defaults to that).
        - cancelable - a boolean specifying whether the action can be
          canceled, same defaults as above apply.
        - parallel_to - the action this one is parallel to, if specified,
          do this action will mirror the other action's finish status
          (i.e. it runs as long as the other action does, and it finishes
          as soon as the other action does). Useful for e.g. animations that
          run in parallel.
*/
export var Action = Object.clone({
    name: "Action",

    /**
        Constructs the action. Takes kwargs, which is an optional argument
        supplying modifiers for the action. It's an associative array.
    */
    __ctor: func(self, kwargs) {
        kwargs = kwargs || {}

        self.begun      = false
        self.finished   = false
        self.start_time = capi::get_current_time()

        self.millis_left = (self.millis_left) ||
            kwargs.millis_left || 0

        self.animation    = (self.animation == undef) &&
            kwargs.animation || false

        self.actor = false

        self.allow_multiple =
            (self.allow_multiple   == undef) &&
            (kwargs.allow_multiple == undef) && true || false

        self.cancelable =
            (self.cancelable   == undef) &&
            (kwargs.cancelable == undef) && true || false

        self.parallel_to =
            (self.parallel_to == undef) && kwargs.parallel_to || false
    },

    /**
        Overloaded so that tostring(x) where x is an action simply
        returns the name ("Action" for the base action).
    */
    __tostring: func(self) { return self.name },

    priv_start: func(self) {
        self.begun = true
        self.__start()
    },

    /**
        By default, empty. Overload in your inherited actions as you need.
        Called when the action flow starts.
    */
    __start: func(self) {
    },

    priv_run: func(self, millis) {
        if typeof self.actor == "table" && self.actor.deactivated {
            self::priv_finish(self)
            return true
        }

        if !self.begun {
            self::priv_start(self)

            if self.animation != false {
                var aanim = self.actor.get_attr("animation")
                var anim = self.animation
                if aanim != anim {
                    self.last_animation = aanim
                    self.actor.set_attr("animation", anim)
                }
            }
        }

        if self.parallel_to == false {
            @[debug] log(INFO, "Executing action " ~ self.name)

            var finished = self.__run(millis)
            if    finished {
                self::priv_finish(self)
            }

            @[debug] log(INFO, "    finished: " ~ tostring(finished))
            return finished
        } else {
            if  self.parallel_to.finished {
                self.parallel_to = false
                self::priv_finish(self)
                return true
            } else {
                return false
            }
        }
    },

    /**
        Override this in inherited actions. By default does almost nothing,
        but the "almost nothing" is important, so make sure to call this
        always at the end of your custom "__run", like this:

        ```
        func Foo.__run(self, millis) {
            echo("run")
            return self.__proto.__proto::__run(self, millis)
        }
        ```

        Basically, the "almost nothing" it does is that it decrements
        the "millis_left" property appropriately and returns true if
        the action has ended (that is, if "millis_left" is lower or
        equal zero) and false otherwise.

        Of course, there are exceptions like the never ending action
        where you don't want to run this, but generally you should.

        Arguments:
            - millis - the amount of time in milliseconds to simulate this
              iteration.
    */
    __run: func(self, millis) {
        self.millis_left = self.millis_left - millis
        return (self.millis_left <= 0)
    },

    priv_finish: func(self) {
        self.finished = true
        var sys = self.queue
        if sys { sys._changed = true }

        if self.animation && self.last_animation != undef {
            var lanim = self.last_animation
            var aanim = self.actor.get_attr("animation")
            if lanim != aanim {
                self.actor.set_attr("animation", lanim)
            }
        }

        self.__finish()
    },

    /**
        By default, empty. Overload in your inherited actions as you need.
        Called when the action finishes.
    */
    __finish: func(self) {
    },

    /**
        Forces the action to finish. Effective only when the "cancelable"
        property of the action is true (it is by default).
    */
    cancel: func(self) {
        if  self.cancelable {
            self.priv_finish()
        }
    }
})

/**
    An action that never ends.
*/
export var InfiniteAction = Action.clone({
    name: "InfiniteAction",

    /**
        One of the exceptional cases of the "__run" method; it always returns
        false because it doesn't manipulate "millis_left".
    */
    __run: func(self, millis) {
        return false
    }
})

/**
    An action queue.

    Fields:
        - parent - the parent entity of this action queue.
        - actions - an array of actions.
*/
export var ActionQueue = Object.clone({
    name: "ActionQueue",

    /**
        Initializes the queue.

        Arguments:
            - parent - the parent entity.
    */
    __ctor: func(self, parent) {
        self.parent   = parent
        self.actions  = []
        self._changed = false
    },

    /**
        Runs the action queue. If there are any actions left from the
        previous frame that are finished, the action array is first
        compacted. Then this runs the first unfinished action in the
        list (providing the millis as an argument).
    */
    run: func(self, millis) {
        var acts = self.actions
        if self._changed {
            acts.compact(\v -> !v.finished)
            self._changed = false
        }
        if !acts.empty() {
            var act = acts.first()
            @[debug] log(INFO, e"Executing $(act.name)")
            // keep the removal for the next frame
            act.priv_run(millis)
        }
    },

    /**
        Enqueues an action. If multiple actions of the same type are not
        enabled on the action we're queuing, this first checks the existing
        queue and if it finds an action of the same type, it warns and returns.
        Otherwise it enqueues the action.
    */
    enqueue: func(self, act) {
        var acts = self.actions
        if !act.allow_multiple {
            var str = act.name
            for i, qact in acts.each() {
                if str == qact.name {
                    log(WARNING, e"Action of the type $str is already present "
                        "in the queue, multiplication explicitly disabled for "
                        "the action.")
                    return
                }
            }
        }
        acts.push(act)
        act.actor = self.parent
        act.queue = self
    },

    /**
        Clears the action queue (cancels every action in the queue).
    */
    clear: func(self) {
        for i, act in self.actions.each() {
            act.cancel()
        }
    }
})