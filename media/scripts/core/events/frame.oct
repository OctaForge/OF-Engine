/**<
    Handles a single main loop frame from the scripting system.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import core.logger as logging
var log = logging.log
var INFO = logging.INFO

var current_frame      = 0
var current_time       = 0
var current_frame_time = 0
var last_millis        = 0

import core.externals

from std.table import setmt

var ents, run_frame

/**
    Executed per frame from C++. It handles the current frame, meaning
    it first  updates all the required timing vars ($get_frame, $get_time,
    $get_frame_time, $get_last_millis) and do runs on all available
    activated entities. External as "frame_handle".
*/
export func handle_frame(millis, lastmillis) {
    if !ents {
        ents = import core.entities.ents
        run_frame = ents.run_frame
    }

    @[debug] log(INFO, "frame.handle_frame: New frame")
    current_frame = current_frame + 1

    current_time       = current_time + millis
    current_frame_time = millis
    last_millis        = lastmillis

    @[debug] log(INFO, "frame.handle_frame: Acting on entities")
    run_frame(millis)
}

externals::set("frame_handle", handle_frame)

var tocalltable = func(v) {
    return setmt({}, { __call: func(_, ...) { return v(...) } })
}

/// Returns the current OctaScript frame count.
export func get_frame() {
    return current_frame
}

/// Returns the number of milliseconds elapsed since the scripting system init.
export func get_time() {
    return current_time
}

/// Returns the current frame time in milliseconds.
export func get_frame_time() {
    return current_frame_time
}

/**
    Returns the number of milliseconds since the last counter reset.
    If you want the total time, see $get_time.
*/
export func get_last_millis() {
    return last_millis
}

/**
    Caches a function by a delay. That comes in handy if you need to
    execute something frequently, but not necessarily every frame.

    Arguments:
        - fun - either a function or a callable table, if given a function
          it's first converted to a callable table.
        - delay - the delay in milliseconds.

    Returns:
        The cached function.

    See also:
        - $cache_by_frame
*/
export func cache_by_delay(fun, delay) {
    if typeof fun == "function" {
        fun = tocalltable(fun)
    }

    if typeof fun != "table" {
        return undef
    }

    fun.last_time = ((-delay) * 2)
    return func(...) {
        if (current_time - fun.last_time) >= delay {
            fun.last_cached_val = fun(...)
            fun.last_time       = current_time
        }
        return fun.last_cached_val
    }
}

/**
    Caches a function by frame. That means it won't get executed more than
    exactly once every frame, no matter how many times in a frame you call
    it.

    Arguments:
        - fun - either a function or a callable table, if given a function
          it's first converted to a callable table.

    Returns:
        The cached function.

    See also:
        - $cache_by_delay
*/
export func cache_by_frame(fun) {
    if typeof fun == "function" {
        fun = tocalltable(fun)
    }

    if typeof fun != "table" {
        return undef
    }

    return func(...) {
        if fun.last_frame != current_frame {
            fun.last_cached_val = fun(...)
            fun.last_frame = current_frame
        }
        return fun.last_cached_val
    }
}