/**<
    OctaScript signal system. Allows connecting and further emitting signals.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import core.logger as log

from std.table import rawget, rawset
from std.math import clamp

/// Module: signal
var M = {}

/**
    Connects a signal to a slot inside a table. The callback has to be a
    function.

    You can later use $emit to call the connected slot(s), passing
    arguments to it (them).

    Slots take at least one argument, the table they're connected to.
    They're called in the order they were conected. Any further arguments
    passed to $emit are also passed to any connected slot.

    ```
    Foo = {}
    signal::connect(Foo, "blah", func(self, a, b, c) {
        echo(a)
        echo(b)
        echo(c)
    })
    signal::emit(Foo, "blah", 5, 10, 15)
    ```

    Arguments:
        - self - the table we're connecting on.
        - name - the signal name.
        - callback - the callback.

    Returns:
        The id for the slot, you can later use that to $disconnect the
        slot, it also returns the number of currently connected slots.
*/
M.connect = func(self, name, callback) {
    if typeof callback != "function" {
        log::log(log.ERROR, "Not connecting non-function callback: " ~ name)
        return undef
    }
    var clistn = "_sig_conn_" ~ name

    var  clist = rawget(self, clistn)
    if !clist {
           clist = []
           // nasty, as this should be just an array... we can still
           // do this though, and we're trying to keep things contained
           clist.slotcount = 0
           rawset(self, clistn, clist)
    }

    var id = clist.len()
    clist.push(callback)

    clist.slotcount = clist.slotcount + 1

    var cb = rawget(self, "__connect")
    if    cb { cb (self, name, callback) }

    return id, clist.slotcount
}

/**
    Disconnects a slot (or slots).

    Arguments:
        - self - the table we're disconnecting on.
        - name - the signal name.
        - id - either the id (see $connect) or the slot itself (what you
          connected). If not provided, it disconnects all slots associated
          with the signal.

    Returns:
        The number of connected slots after disconnect (or undef if nothing
        could be disconnected).
*/
M.disconnect = func(self, name, id) {
    var clistn = "_sig_conn_" ~ name
    var clist  = rawget(self, clistn)
    var cb     = rawget(self, "__disconnect")
    if clist {
        if !id {
            rawset(self, clistn, undef)
            if cb { cb(self, name) }
            return 0
        }
        if typeof id != "number" {
            for i, v in clist.each() {
                if v == id {
                    id = i
                    break
                }
            }
        }
        if id && id < clist.len() {
            var scnt = clist.slotcount - 1
            clist.slotcount = scnt
            clist[id] = false
            if cb { cb(self, name, id, scnt) }
            return scnt
        }
    }
}

/**
    Emits a signal, calling all the slots associated with it in the
    order of connection, passing all extra arguments to it (besides
    the "self" argument). External as "signal_emit".

    Arguments:
        - self - the table we're emitting on.
        - name - the signal name.
        - ... - any further arguments passed to each callback.
*/
M.emit = func(self, name, ...) {
    var clistn = "_sig_conn_" ~ name
    var clist  = rawget(self, clistn)
    if !clist {
        return 0
    }

    var ncalled = 0
    for i, cb in clist.each() {
        if cb {
            ncalled = ncalled + 1
            cb(self, ...)
        }
    }

    return ncalled
}

return M
