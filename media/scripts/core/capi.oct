/**<
    This file patches some of the core API.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import capi
import std.ffi
import luastate
var ents, get_static, get_dynamic

var ffi_new = ffi.new

from std.conv import tostring, tonumber
from std.array import from_table
from std.table import pairs

func gen_getwrap(fun, tp) {
    var tpnm = tp ~ "[1]"
    return func(ent) {
        var stor = ffi_new(tpnm)
        if !fun(ent, stor) { return undef }
        return stor[0]
    }
}

// take a snapshot of capi for later restore

var capi_snapshot = {}
for k, v in pairs(capi) {
    capi_snapshot[k] = v
}

func luastate.capi_restore() {
    for k, v in pairs(capi_snapshot) {
        capi[k] = v
    }
}

@[!server] {
    capi.get_start_time_dyn = gen_getwrap(capi.get_start_time_dyn, "int")
    capi.get_start_time_ext = gen_getwrap(capi.get_start_time_ext, "int")

    var gettargetent in capi
    func capi.gettargetent() {
        if !ents {
            ents = import core.entities.ents
            get_static = ents.get_static
            get_dynamic = ents.get_dynamic
        }
        var stor = ffi_new("int[2]")
        if !gettargetent(stor, stor + 1) { return undef }
        if stor[0] >= 0 {
            return get_static(tonumber(stor[0]))
        } else {
            return get_dynamic(tonumber(stor[1]))
        }
    }

    var gettargetpos in capi
    func capi.gettargetpos() {
        var stor = ffi_new("float[3]")
        gettargetpos(stor)
        return tonumber(stor[0]), tonumber(stor[1]), tonumber(stor[2])
    }

    var get_attr in capi
    func capi.get_attr(ent, id) {
        var stor = ffi_new("int[1]")
        if !get_attr(ent, id, stor) { return undef }
        return stor[0]
    }

    var get_extent_position, set_extent_position in capi

    func capi.get_extent_position(ent) {
        var stor = ffi_new("double[3]")
        if !get_extent_position(ent, stor) { return undef }
        return [ stor[0], stor[1], stor[2] ]
    }

    func capi.set_extent_position(ent, pos) {
        set_extent_position(ent, pos[0], pos[1], pos[2])
    }

    capi.get_maxspeed = gen_getwrap(capi.get_maxspeed, "float")
    capi.get_crouchtime = gen_getwrap(capi.get_crouchtime, "int")
    capi.get_radius = gen_getwrap(capi.get_radius, "float")
    capi.get_eyeheight = gen_getwrap(capi.get_eyeheight, "float")
    capi.get_maxheight = gen_getwrap(capi.get_maxheight, "float")
    capi.get_crouchheight = gen_getwrap(capi.get_crouchheight, "float")
    capi.get_crouchspeed = gen_getwrap(capi.get_crouchspeed, "float")
    capi.get_jumpvel = gen_getwrap(capi.get_jumpvel, "float")
    capi.get_gravity = gen_getwrap(capi.get_gravity, "float")
    capi.get_aboveeye = gen_getwrap(capi.get_aboveeye, "float")
    capi.get_yaw = gen_getwrap(capi.get_yaw, "float")
    capi.get_pitch = gen_getwrap(capi.get_pitch, "float")
    capi.get_roll = gen_getwrap(capi.get_roll, "float")
    capi.get_move = gen_getwrap(capi.get_move, "int")
    capi.get_strafe = gen_getwrap(capi.get_strafe, "int")
    capi.get_yawing = gen_getwrap(capi.get_yawing, "int")
    capi.get_crouching = gen_getwrap(capi.get_crouching, "int")
    capi.get_pitching = gen_getwrap(capi.get_pitching, "int")
    capi.get_jumping = gen_getwrap(capi.get_jumping, "bool")
    capi.get_blocked = gen_getwrap(capi.get_blocked, "bool")
    capi.get_clientstate = gen_getwrap(capi.get_clientstate, "int")
    capi.get_physstate = gen_getwrap(capi.get_physstate, "int")
    capi.get_inwater = gen_getwrap(capi.get_inwater, "int")
    capi.get_timeinair = gen_getwrap(capi.get_timeinair, "int")
    capi.get_lifesequence = gen_getwrap(capi.get_lifesequence, "int")

    var get_dynent_position, set_dynent_position in capi

    func capi.get_dynent_position(ent) {
        var stor = ffi_new("double[3]")
        if !get_dynent_position(ent, stor) { return undef }
        return [ stor[0], stor[1], stor[2] ]
    }

    func capi.set_dynent_position(ent, pos) {
        set_dynent_position(ent, pos[0], pos[1], pos[2])
    }

    var get_dynent_velocity, set_dynent_velocity in capi

    func capi.get_dynent_velocity(ent) {
        var stor = ffi_new("double[3]")
        if !get_dynent_velocity(ent, stor) { return undef }
        return [ stor[0], stor[1], stor[2] ]
    }

    func capi.set_dynent_velocity(ent, vel) {
        set_dynent_velocity(ent, vel[0], vel[1], vel[2])
    }

    var get_dynent_falling, set_dynent_falling in capi

    func capi.get_dynent_falling(ent) {
        var stor = ffi_new("double[3]")
        if !get_dynent_falling(ent, stor) { return undef }
        return [ stor[0], stor[1], stor[2] ]
    }

    func capi.set_dynent_falling(ent, fl) {
        set_dynent_falling(ent, fl[0], fl[1], fl[2])
    }

    capi.get_ping = gen_getwrap(capi.get_ping, "int")
    capi.get_plag = gen_getwrap(capi.get_plag, "int")
}

capi.get_server_clientstate = gen_getwrap(capi.get_server_clientstate, "int")
capi.get_server_lifesequence = gen_getwrap(capi.get_server_lifesequence, "int")

var ffi_str = ffi.string

@[!server] {

    var dynlight_add, dynlight_add_spot in capi

    func capi.dynlight_add(ox, oy, oz, radius, r, g, b, fade, peak,
    flags, initrad, ir, ig, ib, ent) {
        return dynlight_add(ox, oy, oz, radius, r, g, b, fade || 0, peak || 0,
            flags || 0, initrad || 0, ir || 0, ig || 0, ib || 0,
            ent && ent.cn || -1)
    }

    func capi.dynlight_add_spot(ox, oy, oz, dx, dy, dz, radius, spot,
    r, g, b, fade, peak, flags, initrad, ir, ig, ib, ent) {
        return dynlight_add_spot(ox, oy, oz, dx, dy, dz, radius, r, g, b,
            fade || 0, peak || 0, flags || 0, initrad || 0, ir || 0, ig || 0,
            ib || 0, ent && ent.cn || -1)
    }

    var getfps in capi

    func capi.getfps() {
        var stor = ffi_new("int[3]")
        getfps(stor)
        return stor[0], stor[1], stor[2]
    }

    var slot_get_name in capi

    func capi.slot_get_name(idx, subslot) {
        var str = slot_get_name(idx, subslot)
        if str != undef { return ffi_str(str) }
    }

    var input_get_key_name in capi

    func capi.input_get_key_name(n) {
        return ffi_str(input_get_key_name(n))
    }

    var camera_get_position, camera_get in capi

    func capi.camera_get_position() {
        var stor = ffi_new("float[3]")
        camera_get_position(stor)
        return stor[0], stor[1], stor[2]
    }

    func capi.camera_get() {
        var stor = ffi_new("float[6]")
        camera_get(stor)
        return stor[0], stor[1], stor[2], stor[3], stor[4], stor[5]
    }

    var text_get_res in capi

    func capi.text_get_res(w, h) {
        var stor = ffi_new("int[2]")
        text_get_res(w, h, stor)
        return stor[0], stor[1]
    }

    var text_get_bounds, text_get_boundsf in capi

    func capi.text_get_bounds(text, maxw) {
        var stor = ffi_new("int[2]")
        text_get_bounds(tostring(text), maxw, stor)
        return stor[0], stor[1]
    }

    func capi.text_get_boundsf(text, maxw) {
        var stor = ffi_new("float[2]")
        text_get_boundsf(tostring(text), maxw, stor)
        return stor[0], stor[1]
    }

    var text_get_position, text_get_positionf in capi

    func capi.text_get_position(text, cursor, maxw) {
        var stor = ffi_new("int[2]")
        text_get_position(tostring(text), cursor, maxw, stor)
        return stor[0], stor[1]
    }

    func capi.text_get_positionf(text, cursor, maxw) {
        var stor = ffi_new("float[2]")
        text_get_positionf(tostring(text), cursor, maxw, stor)
        return stor[0], stor[1]
    }

    var get_all_map_names in capi
    func capi.get_all_map_names() {
        var t1, s1, t2, s2 = get_all_map_names()
        return from_table(t1, s1), from_table(t2, s2)
    }

    var findanims in capi
    func capi.findanims(pattern) {
        return from_table(findanims(pattern))
    }

    var texture_get_packs in capi
    func capi.texture_get_packs() {
        var t, s = texture_get_packs()
        t = from_table(t, s)
        for i, v in t.each() {
            t[i] = from_table(v)
        }
        return t
    }

    var texture_get_data in capi
    func capi.texture_get_data(fn) {
        var w, h, t = texture_get_data(fn)
        from_table(t, w)
        for i, v in t.each() {
            from_table(v, h)
        }
        return w, h, t
    }

    var texture_draw_slot, texture_draw_vslot in capi
    func capi.texture_draw_slot(idx, w, h, x, y) {
        var stor = ffi_new("int[2]")
        texture_draw_slot(idx, w, h, x, y, stor, stor + 1)
        return tonumber(stor[0]), tonumber(stor[1])
    }
    func capi.texture_draw_vslot(idx, w, h, x, y) {
        var stor = ffi_new("int[2]")
        texture_draw_vslot(idx, w, h, x, y, stor, stor + 1)
        return tonumber(stor[0]), tonumber(stor[1])
    }

    var isconnected in capi
    func capi.isconnected(attempt, local) {
        if local == undef { local = true }
        return isconnected(attempt || false, local)
    }
}
