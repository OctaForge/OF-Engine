/**<
    OctaScript access to cubescript features, such as code execution and engine
    variables. You can connect signals in form "varname,changed" to the module.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

import capi
import core.externals
from std.object import Object

export func __connect(self, name) {
    var  vn = name.find_match("(.+),changed$")
    if !vn { return }
    capi::var_make_emit(vn, true)
}

export func __disconnect(self, name, id, scount) {
    if scount == 0 {
        var  vn = name.find_match("(.+),changed$")
        if !vn { return }
        capi::var_make_emit(vn, false)
    }
}

/**
    Runs a cubescript string. Returns the string return value (if possible).
*/
export var execute = capi.cubescript

/**
    Defines cubescript/engine variable types. Contains "int", "float"
    and "string".
*/
export var var_type = enum {
    int: 0, float: 1, string: 2
}

/**
    Defines flags that can be passed during variable creation. Includes
    PERSIST (the variable will be saved in the configuration file), OVERRIDE
    (a mapvar, will be reset after the map ends) and READONLY.

    In a "safe" environment (run within a gamescript), PERSIST has no effect,
    OVERRIDE is implicit and HEX and READONLY will still work.
*/
export var var_flags = enum {
    PERSIST : 1 << 0,
    OVERRIDE: 1 << 1,
    HEX     : 1 << 2,
    COLOR   : 1 << 3,
    READONLY: 1 << 4
}

/**
    Resets an engine variable of the given name.
*/
export var var_reset = capi.var_reset

/**
    Creates an engine variable using the given arguments. The number of
    arguments may differ depending on variable type.

    Arguments:
        - name - the new variable's name.
        - type - the new variable's type (see $var_type).
        - min, def, max - minimum, default and maximum value of the variable,
          for string variables only default is present.
        - flags - see $var_flags.

    See also:
        - $var_new_checked
*/
export var var_new = capi.var_new

/**
    Same as above, but checks for the variable existence. If it exists, it
    returns false, otherwise returns true.

    See also:
        - $var_new
*/
export func var_new_checked(varn, ...) {
    if !capi::var_exists(varn) {
        capi::var_new(varn, ...)
        return true
    }
    return false
}

/**
    Sets an engine variable value.

    Arguments:
        - name - the variable's name.
        - val - the new value.
        - cb - a boolean specifying whether to run a callback on this change
          (true by default), such as any connected signal or builtin callback.
        - clamp - optional and present only for integer and float variables,
          defaults to true and specifies whether to clamp the value within
          the variable's bounds.
*/
export var var_set = capi.var_set

/**
    Given a variable name, this returns its value (or nothing if it doesn't
    exist).

    See also:
        - $var_get_min
        - $var_get_max
        - $var_get_def
*/
export var var_get = capi.var_get

/**
    See above, returns the minimum value.

    See also:
        - $var_get
        - $var_get_max
        - $var_get_def
*/
export var var_get_min = capi.var_get_min

/**
    See above, returns the maximum value.

    See also:
        - $var_get
        - $var_get_min
        - $var_get_def
*/
export var var_get_max = capi.var_get_max

/**
    See above, returns the default value.

    See also:
        - $var_get
        - $var_get_min
        - $var_get_max
*/
export var var_get_def = capi.var_get_def

/// Given a variable name, this returns its type.
export var var_get_type = capi.var_get_type

/// Given a variable name, this returns its flags.
export var var_get_flags = capi.var_get_flags

/// Checks if the engine variable of the given name is hex.
export var var_is_hex = capi.var_is_hex

/// Checks for existence of an engine variable.
export var var_exists = capi.var_exists

from std.array import from_table

/// Gets the names of all vars
export func var_get_all_names() {
    return from_table(capi::var_get_all_names())
}

import core.engine.cubescript as M // self-import

externals::set("var_emit_changed", func(name, ...) {
    Object::emit(M, name ~ ",changed", ...)
})