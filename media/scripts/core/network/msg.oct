/**<
    Provides an API to the OctaForge message system.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

/// Module: msg
var M = {}

from std.util import assert
from std.conv import tonumber
from std.string import char
from core.externals import set as setext

from core.octascript.messagepack import unpack as mp_unpack

import capi

/**
    A constant (value -1) used when sending messages. Specifying this constant
    means that the message will be sent to all clients.
*/
M.ALL_CLIENTS = -1

import capi

M.is_local = @[server,func() { return true },func() {
    return capi::isconnected(false, true) && !capi::isconnected(false, false)
}]
var is_loc = M.is_local

M.is_server = @[server,func() { return true },func() {
    return capi::islistenserver() || is_loc()
}]

M.is_server_only = @[server,func() { return true },func() {
    return capi::islistenserver() && !capi::isconnected(false, true)
}]

// low level stuff, unexposed

import std.ffi

var get_byte = func(c) {
    return tonumber(capi::ucharbuf_getuchar(c.p))
}
var cursor_msg = func(p) {
    return { p: p, get_byte: get_byte }
}
var ubuft = ffi["typeof"]("ucharbuf &")
setext("buf_get_msgpack", func(p) {
    return mp_unpack(cursor_msg(ffi::cast(ubuft, p)))
})

return M
