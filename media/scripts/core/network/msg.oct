/**<
    Provides an API to the OctaForge message system.

    Author:
        q66 <quaker66@gmail.com>

    License:
        See COPYING.txt.
*/

/// Module: msg
var M = {}

from std.util import assert
from std.conv import tonumber
from core.externals import set as setext

import capi

var message_types = {}
// scripting messages start after the first byte
var current_mid = 256

/**
    A constant (value -1) used when sending messages. Specifying this constant
    means that the message will be sent to all clients.
*/
M.ALL_CLIENTS = -1

/**
    Registers a message receiver and returns its ID.
*/
M.register = func(receiver) {
    message_types[current_mid] = receiver
    current_mid += 1
    return current_mid - 1
}

import std.ffi
import capi

M.buf_get_int = func(self) {
    return tonumber(capi::ucharbuf_getint(self))
}

M.buf_get_uint = func(self) {
    return tonumber(capi::ucharbuf_getuint(self))
}

M.buf_get_float = func(self) {
    return tonumber(capi::ucharbuf_getfloat(self))
}

M.buf_get_string = func(self, n) {
    n = n || 5000 // our MAXTRANS value
    var buf = ffi::new("char[?]", n)
    capi::ucharbuf_getstring(self, buf, n)
    return ffi::string(buf)
}

var ubuft = ffi["typeof"]("ucharbuf &")

setext("message_receive", func(tp, receiver, sender, p) {
    tp = tonumber(tp)
    var recv = message_types[tp]
    if  recv == undef {
        return false
    }
    recv(tp, tonumber(receiver), tonumber(sender), ffi::cast(ubuft, p))
    return true
})

M.is_local = @[server,func() { return true },func() {
    return capi::isconnected(false, true) && !capi::isconnected(false, false)
}]

return M
