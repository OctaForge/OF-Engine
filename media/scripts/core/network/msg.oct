/**<
    Provides an API to the OctaForge message system.

    Author:
        q66 <daniel@octaforge.org>

    License:
        See COPYING.txt.
*/

from std.util import assert
from std.conv import tonumber
from std.string import char

import core.externals

from core.octascript.messagepack import unpack as mp_unpack

import capi

/**
    A constant (value -1) used when sending messages. Specifying this constant
    means that the message will be sent to all clients.
*/
export var ALL_CLIENTS = -1

import capi

export var is_local = @[server,func() { return true },func() {
    return capi::isconnected(false, true) && !capi::isconnected(false, false)
}]

export var is_server = @[server,func() { return true },func() {
    return capi::islistenserver() || is_local()
}]

export var is_server_only = @[server,func() { return true },func() {
    return capi::islistenserver() && !capi::isconnected(false, true)
}]

// low level stuff, unexposed

import std.ffi

func get_byte(c) {
    return tonumber(capi::ucharbuf_getuchar(c.p))
}
func cursor_msg(p) {
    return { p: p, get_byte: get_byte }
}
var ubuft = ffi["typeof"]("ucharbuf &")
externals::set("buf_get_msgpack", func(p) {
    return mp_unpack(cursor_msg(ffi::cast(ubuft, p)))
})