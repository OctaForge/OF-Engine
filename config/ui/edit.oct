import capi
import core.engine.edit
import core.engine.input
import core.entities.ents
import core.entities.svars
import core.events.signal
import core.gui.core as gui

import core.engine.cubescript as cs

from std.table import pairs
from std.conv import tostring, tonumber

var root = gui::get_root()

func slots_populate(gr, slotlist, isv) {
    gr.destroy_children()
    for i, slot in slotlist.each() {
        var ttip = gui::Outline({ variant: "normal" },
            gui::ColorFiller({ color: 0x151515, min_w: 0.225, min_h: 0.225 },
            (isv ? gui.VSlotViewer : gui.SlotViewer)({
                index: slot, min_w: 0.22, min_h: 0.22
            })
        ))
        var vb = gr.append(gui::VBox())
        var btn = vb.append(gui::Button({ variant: isv ? "vslot" : "slot",
            index: slot, min_w: 0.095, min_h: 0.095
        }), func(b) {
            signal::connect(b, "clicked", \-> capi::slot_set(
                isv ? slot : capi::slot_get_tex(slot)))
            signal::connect(b, "hovering", \self -> self.show_tooltip(ttip))
        })
        var lbl = vb.append(gui::Label({
            tex: "0x0", scale: 0.7, align_h: -1, color: 0x50FFFFFF
        }))
        signal::connect(btn, "tex_size,changed", func(o, tw, th) {
            lbl.set_text(tw ~ "x" ~ th)
        })
    }
}

var last_filter

func gen_slot_filters(packs, gr) {
    var pcbs, pcbf, pcbl = {}, {}, []

    pcbs["all"] = func() {
        var slotl = []
        for i in 0 to capi::slot_get_count() - 1 {
            slotl.push(i)
        }
        slots_populate(gr, slotl)
        last_filter = "all"
    }
    pcbf["all"] = func() {
        for i, val in packs.each() {
            cs::execute(e"texpackreload \"$(val[0])\"")
        }
    }
    pcbl.push("all")

    var otherslots = []
    for i in 0 to capi::slot_get_count() - 1 {
        otherslots.push(i)
    }

    for i, val in packs.each() {
        var slotl = []
        for i in val[1] to val[1] + val[2] - 1 {
            otherslots[i] = undef
            slotl.push(i)
        }
        pcbs[val[0]] = func() {
            slots_populate(gr, slotl)
            last_filter = val[0]
        }
        pcbf[val[0]] = func() {
            cs::execute(e"texpackreload \"$(val[0])\"")
        }
        pcbl.push(val[0])
    }

    otherslots.compact(\v -> v)
    if otherslots.len() > 0 {
        func ocb() {
            slots_populate(gr, otherslots)
            last_filter = "other"
        }
        pcbs["other"] = ocb
        pcbl.push("other")
    }

    return pcbs, pcbf, pcbl
}

func gen_tex_layout(bx, gr, grid_load) {
    var s
    bx.append(gui::Outline({ variant: "normal", min_w: 0.84, min_h: 0.6 }), func(o) {
        o.append(gui::Spacer({ pad_h: 0.005, pad_v: 0.005 }), func(sp) {
            sp.align(-1, -1)
            sp.append(gui::Scroller({ clip_w: 0.9, clip_h: 0.6 }), func(sc) {
                sc.append(gr, grid_load)
                s = sc
            })
        })
    })
    bx.append(gui::VScrollbar({ clamp_v: true }), func(sb) {
        sb.append(gui::ScrollButton())
        sb.bind_scroller(s)
    })
}

func gen_tex_listed() {
    var r = gui::VBox()

    var gr = gui::Grid({ columns: 8, padding: 0.01 })
    var sp = r.append(gui::Spacer({ pad_h: 0.005, pad_v: 0.005 }))
    var hb = sp.append(gui::HBox({ padding: 0.02 }))
    hb.append(gui::Label({ text: "Filter by pack:" }))

    var cbx = hb.append(gui::MenuButton({ variant: "combobox", min_w: 0.25 }))
    var mnc = gui::Filler({ variant: "menu", min_w: 0.25 })
    mnc.parent = cbx
    var mn = mnc.append(gui::VBox({ clamp: true }))
    signal::connect(cbx, "clicked", func(mb) {
        mb.show_menu(mnc)
    })

    var curreload
    var rbtn = hb.append(gui::Button({ label: "Reload" }))
    signal::connect(rbtn, "clicked", func(bt) {
        if curreload { curreload() }
    })

    func grid_load() {
        var pcbs, pcbf, pcbl = gen_slot_filters(capi::texture_get_packs(), gr)
        mn.destroy_children()
        for i, pname in pcbl.each() {
            var mb = mn.append(gui::MenuButton({ variant: "submenu",
                label: pname, clamp_h: true }))
            signal::connect(mb, "clicked", func() {
                curreload = pcbf[pname]
                pcbs[pname]()
                cbx.set_label(pname)
                root.clear_menus()
                rbtn.set_disabled(pname == "other")
                rbtn.set_label((pname == "all") ? "Reload all" : "Reload")
            })
        }
        cbx.set_disabled(pcbl.len() == 0)
        var cb
        if last_filter { cb = pcbs[last_filter] }
        if !cb {
            cb = pcbs["all"]
            last_filter = undef
        }
        var lf = last_filter || "all"
        cbx.set_label(lf)
        curreload = pcbf[lf]
        rbtn.set_disabled(lf == "other")
        rbtn.set_label((lf == "all") ? "Reload all" : "Reload")
        cb()
    }
    var cid = signal::connect(edit, "texpacks,changed", grid_load)
    signal::connect(r, "destroy", func() {
        signal::disconnect(edit, "texpacks,changed", cid)
    })

    var hb = r.append(gui::HBox())
    gen_tex_layout(hb, gr, grid_load)
    return r
}

func gen_tex_utilized() {
    var hb = gui::HBox()

    var gr = gui::Grid({ columns: 8, padding: 0.01 })
    func grid_load() {
        var slotl = []
        for i in 0 to capi::slot_texmru_num() - 1 {
            slotl.push(capi::slot_texmru(i))
        }
        slots_populate(gr, slotl, true)
    }
    var cid = signal::connect(edit, "texpacks,changed", grid_load)
    signal::connect(hb, "destroy", func() {
        signal::disconnect(edit, "texpacks,changed", cid)
    })

    gen_tex_layout(hb, gr, grid_load)
    return hb
}

var laststate
root.new_window("texture", gui.Window, func(win) {
    win.set_floating(true)
    win.set_variant("movable")
    var ttl = gui::HBox({ padding: 0.005 })
    var stat
    var lbtn = ttl.append(gui::Button({ label: "Listed", min_w: 0.14 }))
    var ubtn = ttl.append(gui::Button({ label: "Utilized", min_w: 0.14 }))
    signal::connect(lbtn, "clicked", \-> stat.set_state("listed"))
    signal::connect(ubtn, "clicked", \-> stat.set_state("utilized"))
    win.set_title(ttl)
    win.append(gui::State({ state: laststate || "utilized" }), func(st) {
        stat = st
        st.update_state("listed"  , gen_tex_listed())
        st.update_state("utilized", gen_tex_utilized())
        signal::connect(st, "state,changed", func(self, nstate) {
            laststate = nstate
            lbtn.set_variant((nstate == "listed") ? "default" : "nobg")
            ubtn.set_variant((nstate != "listed") ? "default" : "nobg")
        })
        signal::emit(st, "state,changed", st.state)
    })
})

var fields = {
    (svars.StateBoolean): func(hb, nm, ent, dv) {
        var tvar = (dv == "true")
        var ret
        hb.append(gui::Filler({ min_w: 0.4 }), func(f) {
            f.append(gui::Toggle({ variant: "checkbox", condition: \-> tvar,
                align_h: -1
            }), func(t) {
                ret = t
                signal::connect(t, "released", func() {
                    tvar = !tvar
                    capi::makeundoent()
                    ent.set_gui_attr(nm, tostring(tvar))
                })
            })
        })
        return ret
    },
    (svars.StateInteger): func(hb, nm, ent, dv) {
        var ed = hb.append(gui::Field({ clip_w: 0.35, value: dv }), func(ed) {
            signal::connect(ed, "value,changed", func(ed, v) {
                capi::makeundoent()
                ent.set_gui_attr(nm, v)
            })
        })
        var lstep = 0
        func addstep(f) {
            var tmillis = capi::get_millis(true)
            if lstep + 50 > tmillis { return }
            lstep = tmillis
            ed.value = tostring(f(ent, nm))
            ed.reset_value()
        }
        var bprops = \lbl -> { label: lbl, label_scale: 0.8,
            label_pad_h: 0.005, label_pad_v: 0.002,
            min_w: 0.025, min_h: 0.025
        }
        hb.append(gui::Button(bprops("+")), func(btn) {
            signal::connect(btn, "holding", \-> addstep(ent.add_attr))
        })
        hb.append(gui::Button(bprops("-")), func(btn) {
            signal::connect(btn, "holding", \-> addstep(ent.sub_attr))
        })
        return ed
    }
}
fields[svars.StateFloat] = fields[svars.StateInteger]

func field_def(hb, nm, ent, dv) {
    return hb.append(gui::Field({ clip_w: 0.4, value: dv }), func(ed) {
        signal::connect(ed, "value,changed", func(ed, v) {
            capi::makeundoent()
            ent.set_gui_attr(nm, v)
        })
    })
}

root.new_window("entity", gui.Window, func(win) {
    win.set_floating(true)
    win.set_variant("movable")
    var  ent = ents::get_static(capi::get_selected_entity())
    if !ent {
        ent = ents::get_player()
    }
    if !ent {
        win.set_title("Entity editing: none")
        win.append(gui::Spacer({ pad_h: 0.04, pad_v: 0.03 },
            gui::Label({ text: "No selected entity" })))
        return
    }
    win.set_title("Entity editing: %s (%d)".format(ent.name, ent.uid))
    var props = []
    var sdata = []
    var sdata_raw = ent.build_sdata()

    var prefix = "_SV_"
    for k, v in pairs(sdata_raw) {
        var sv = ent[prefix ~ k]
        var gn = sv.gui_name
        if gn != false {
            var nm = gn || k
            sdata[nm] = [ sv.to_data(v), sv ]
            props.push(nm)
        }
    }
    props.sort()

    win.append(gui::HBox(), func(hb) {
        var s
        hb.append(gui::Outline({ variant: "normal" }), func(o) {
            o.append(gui::Spacer({ pad_h: 0.005, pad_v: 0.005 }), func(sp) {
                sp.append(gui::Scroller({ clip_w: 0.9, clip_h: 0.6 }), func(sc) {
                    sc.append(gui::VBox(), func(vb) {
                        var fpf, pf
                        for i, nm in props.each() {
                            var sd = sdata[nm]
                            var dv, sv = sd[0], sd[1]
                            vb.append(gui::HBox({ align_h: 1 }), func(hb) {
                                hb.append(gui::Label({ text: " " ~ nm
                                    ~ ": " }))
                                var fld = fields[sv.__proto] || field_def
                                var fd = fld(hb, nm, ent, dv)
                                if pf { pf.set_tab_next(fd) }
                                pf = fd
                                if !fpf { fpf = fd }
                            })
                            if fpf && pf && pf != fpf {
                                pf.set_tab_next(fpf)
                            }
                        }
                    })
                    s = sc
                })
            })
        })
        hb.append(gui::VScrollbar({ clamp_v: true }), func(sb) {
            sb.append(gui::ScrollButton())
            sb.bind_scroller(s)
        })
    })
})

root.new_window("entity_new", gui.Window, func(win) {
    win.set_floating(true)
    win.set_variant("movable")
    win.set_title("New entity")

    var cnames = []
    for k, v in pairs(ents::get_all_prototypes()) {
        if v.is_a(ents.StaticEntity) {
            cnames.push(k)
        }
    }
    cnames.sort()

    win.append(gui::HBox(), func(hb) {
        var s
        hb.append(gui::Outline({ variant: "normal" }), func(o) {
            o.append(gui::Spacer({ pad_h: 0.005, pad_v: 0.005 }), func(sp) {
                sp.append(gui::Scroller({ clip_w: 0.6, clip_h: 0.6 }), func(sc) {
                    sc.append(gui::VBox(), func(vb) {
                        for i, n in cnames.each() {
                            vb.append(gui::Button({
                                variant: "nobg", min_w: 0.3, label: n
                            }), func(btn) {
                                signal::connect(btn, "clicked", func() {
                                    cs::execute(e"newent $n")
                                    root.hide_window("entity_new")
                                })
                            })
                        }
                    })
                    s = sc
                })
            })
        })
        hb.append(gui::VScrollbar({ clamp_v: true }), func(sb) {
            sb.append(gui::ScrollButton())
            sb.bind_scroller(s)
        })
    })
})

func make_varfield(hb, nm) {
    var vfs = cs.var_flags
    var flg = cs::var_get_flags(nm)
    var dis = (flg & vfs.READONLY) != 0
    var per = (flg & vfs.PERSIST ) != 0
    var map = (flg & vfs.OVERRIDE) != 0
    hb.append(gui::Label({ text: " " ~ nm ~ ":" }))
    hb.append(gui::Filler({ min_w: 0.03 },
        gui::Label({ text: per ? "\f3P" : (map ? "\f2M" : "") })))
    return hb.append(gui::Field({ clip_w: 0.4, variable: nm, disabled: dis }))
}

var vtypes = {
    0: "\f0Integer variables",
    1: "\f0Floating point variables",
    2: "\f0String variables"
}

root.new_window("variables", gui.Window, func(win) {
    win.set_floating(true)
    win.set_variant("movable")
    win.set_title("Engine variables (P: persistent, M: mapvar)")

    var vnames = cs::var_get_all_names()

    var vfs = cs.var_flags
    vnames.sort(func(va, vb) {
        var ta, tb = cs::var_get_type(va), cs::var_get_type(vb)
        if ta == tb {
            var fla, flb = cs::var_get_flags(va), cs::var_get_flags(vb)
            var hxa, hxb = fla & vfs.HEX, flb & vfs.HEX
            if hxa == hxb {
                var cla, clb = fla & vfs.COLOR, flb & vfs.COLOR
                if cla == clb {
                    return va < vb
                }
                return cla < clb
            }
            return hxa < hxb
        }
        return ta < tb
    })

    win.append(gui::HBox(), func(hb) {
        var s
        hb.append(gui::Outline({ variant: "normal" }), func(o) {
            o.append(gui::Spacer({ pad_h: 0.005, pad_v: 0.005 }), func(sp) {
                sp.append(gui::Scroller({ clip_w: 0.9, clip_h: 0.6 }), func(sc) {
                    sc.append(gui::VBox(), func(vb) {
                        var fpf, pf, ptp, phx, pcl
                        for i, varn in vnames.each() {
                            var dis = false
                            var tp = cs::var_get_type(varn)
                            var fl = cs::var_get_flags(varn)
                            var hx = fl & vfs.HEX
                            var cl = fl & vfs.COLOR
                            if tp != ptp {
                                vb.append(gui::Spacer({ pad_h: 0.0075, pad_v: 0.0075 },
                                    gui::Label({ text: vtypes[tp] })))
                                ptp = tp
                            }
                            if hx != 0 && hx != phx {
                                vb.append(gui::Spacer({ pad_h: 0.0075, pad_v: 0.0075 },
                                    gui::Label({ text: "\f1Hex variables", scale: 0.75 })))
                                phx = hx
                            }
                            if cl != 0 && cl != pcl {
                                vb.append(gui::Spacer({ pad_h: 0.0075, pad_v: 0.0075 },
                                    gui::Label({ text: "\f1Color variables", scale: 0.75 })))
                                pcl = cl
                            }
                            vb.append(gui::HBox({ align_h: 1 }), func(hb) {
                                var fd = make_varfield(hb, varn)
                                if fd.disabled {
                                    dis = true
                                } else {
                                    if pf { pf.set_tab_next(fd) }
                                    pf = fd
                                    if !fpf { fpf = fd }
                                }
                            })
                            if !dis && fpf && pf && pf != fpf {
                                pf.set_tab_next(fpf)
                            }
                        }
                    })
                    s = sc
                })
            })
        })
        hb.append(gui::VScrollbar({ clamp_v: true }), func(sb) {
            sb.append(gui::ScrollButton())
            sb.bind_scroller(s)
        })
    })
})
