import core.engine.edit
import core.gui.core as gui
from core.engine.cubescript import execute

/* Main menu */

func gen_menu_default() {
    var r = gui::Outline({ min_w: 0.6, min_h: 0.5, variant: "normal" })
    r.append(gui::VBox(), func(vb) {
        vb.append(gui::Label({ text: "Welcome to OctaForge!", scale: 1.5,
            color: 0x88FF88
        }))
        vb.append(gui::Label({ text: "Please start by clicking one of the "
            "menu items." }))
    })
    return r
}

func gen_map_list(img, vb) {
    var glob, loc = edit::get_all_map_names()
    var current_preview

    func ml_section(lbl, arr) {
        vb.append(gui::Filler({ min_h: 0.005 }))
        vb.append(gui::Label({ text: lbl, color: 0x88FF88 }))
        vb.append(gui::Filler({ min_h: 0.002 }))

        for i, map in arr.each() {
            vb.append(gui::Button({ label: map, clamp_h: true,
                variant: "nobg", min_w: 0.2
            }), func(btn) {
                btn.connect("hovering", func() {
                    if map != current_preview {
                        current_preview = map
                        img.set_tex("media/map/" ~ map ~ "/preview")
                    }
                })
                btn.connect("leaving", func() {
                    current_preview = undef
                    img.set_tex(undef)
                })
                btn.connect("clicked", func() {
                    execute("map " ~ map)
                })
            })
        }
        if arr.empty() {
            vb.append(gui::Label({ text: "(None available)", color: 0xFF6666,
                scale: 0.8 }))
        }
    }

    ml_section("Global maps", glob)
    ml_section("Local maps", loc)
}

func gen_menu_map_load() {
    var s
    var r = gui::HBox()
    r.append(gui::Outline({ variant: "normal" }), func(o) {
        o.append(gui::Spacer({ pad_h: 0.005, pad_v: 0.005 }), func(sp) {
            sp.append(gui::Scroller({ clip_w: 0.6, clip_h: 0.5 }), func(sc) {
                s = sc
                sc.append(gui::HBox({ padding: 0.01 }), func(hb) {
                    var im
                    hb.append(gui::Spacer({ pad_h: 0.02, pad_v: 0.02 },
                        gui::Image({ min_w: 0.3, min_h: 0.3,
                            __init: func(img) { im = img } },
                            gui::Outline({ clamp: true, variant: "normal" }))))
                    hb.append(gui::VBox(), func(vb) {
                        vb.align(0, -1)
                        gen_map_list(im, vb)
                    })
                })
            })
        })
    })
    return r
}

func gen_menu_credits() {
    var r = gui::Outline({ min_w: 0.6, min_h: 0.5, variant: "normal" })
    r.append(gui::VBox(undef,
        gui::Label({ text: "OctaForge is brought to you by:",
            color: 0x88FF88 }),
        gui::Filler({ min_h: 0.01, clamp_h: true }),
        gui::Label({ text: 'Daniel \f1"q66"\f7 Kolesa' }),
        gui::Label({ text: "project leader and main programmer",
            scale: 0.8 }),
        gui::Filler({ min_h: 0.008, clamp_h: true }),
        gui::Label({ text: 'Lee \f1"eihrul"\f7 Salzman' }),
        gui::Label({ text: 'David \f1"dkreuter"\f7 Kreuter' }),
        gui::Label({ text: 'Dale \f1"graphitemaster"\f7 Weiler' }),
        gui::Label({ text: "code contributors", scale: 0.8 }),
        gui::Filler({ min_h: 0.01, clamp_h: true }),
        gui::Label({ text: "Based on Tesseract created by:",
            color: 0x88FF88 }),
        gui::Filler({ min_h: 0.01, clamp_h: true }),
        gui::Label({ text: 'Lee \f1"eihrul"\f7 Salzman' }),
        gui::Label({ text: "and others",  scale: 0.8 }),
        gui::Filler({ min_h: 0.01, clamp_h: true }),
        gui::Label({ text: "The original Cube 2 engine:",
            color: 0x88FF88 }),
        gui::Filler({ min_h: 0.01, clamp_h: true }),
        gui::Label({ text: 'Wouter \f1"aardappel"\f7 van '
            ~ 'Oortmerssen' }),
        gui::Label({ text: 'Lee \f1"eihrul"\f7 Salzman' }),
        gui::Label({ text: "and others",  scale: 0.8 }),
        gui::Filler({ min_h: 0.01, clamp_h: true }),
        gui::Label({ text: "Formerely based on Syntensity created by:",
            color: 0x88FF88 }),
        gui::Filler({ min_h: 0.01, clamp_h: true }),
        gui::Label({ text: 'Alon \f1"kripken"\f7 Zakai' }),
        gui::Filler({ min_h: 0.01, clamp_h: true })
    ))
    return r
}

func gen_menu_btn(b, lbl, cb) {
    return b.append(gui::Button({ label: lbl, clamp_h: true, variant: "nobg" }),
        func(btn) {
            btn.connect("clicked", cb)
        }
    )
}

var laststate

gui::get_root().new_window("main", gui.Window, func(win) {
    win.set_floating(true)
    win.set_variant("movable")
    win.set_title("Main menu")
    win.append(gui::HBox({ clamp_h: true }), func(b) {
        var stat
        var btn_lm, btn_cr
        var root = gui::get_root()
        b.append(gui::VBox(), func(b) {
            btn_lm = gen_menu_btn(b, "Load map", \-> stat.set_state("load_map"))
                     gen_menu_btn(b, "Options",  \-> root.show_window("options"))
            btn_cr = gen_menu_btn(b, "Credits",  \-> stat.set_state("credits"))
                     gen_menu_btn(b, "Quit",     \-> execute("quit"))
        })
        b.append(gui::Filler({ min_w: 0.005, clamp_v: true }))
        b.append(gui::State({ state: laststate || "default" }), func(st) {
            stat = st
            st.update_state("default" , gen_menu_default())
            st.update_state("load_map", gen_menu_map_load())
            st.update_state("credits" , gen_menu_credits())
            st.connect("state,changed", func(self, nstate) {
                laststate = nstate
                btn_lm.set_variant((nstate == "load_map") ? "default" : "nobg")
                btn_cr.set_variant((nstate == "credits" ) ? "default" : "nobg")
            })
            st.emit("state,changed", st.state)
        })
    })
})

from std.eval import dofile

dofile("config/ui/options.oct")
dofile("config/ui/edit.oct")
dofile("config/ui/misc.oct")
dofile("config/ui/2048.oct")
